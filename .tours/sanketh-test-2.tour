{
  "$schema": "https://aka.ms/codetour-schema",
  "title": "APIs and database models in Platform",
  "steps": [
    {
      "file": "managed/src/main/resources/v1.routes",
      "description": "Let us walk through what it takes to add a new 'field' to one of the existing APIs. The final changes we are walking through are from https://github.com/yugabyte/yugabyte-db/commit/21a40e1eb813e2fd1e7250d9db7747c19558df03.\r\n\r\nWe start from the API call to create a new Certificate object.\r\n\r\nThe routes file maps REST API calls to their handler methods. Routing syntax follows the rules documented in Play framework's docs at https://www.playframework.com/documentation/2.8.x/JavaRouting\r\n\r\n\r\nJSON parameters specified in POST/PUT requests are not specified in the routes file but query parameters like `/foo/bar?param=xyz` can be specified here. See https://www.playframework.com/documentation/2.6.x/JavaRouting#Parameter-types for more details.",
      "line": 124,
      "contents": "\n\n###################################################################################################\n#\n# V1 API endpoints.\n#\n###################################################################################################\n\n# -- Session specific API (UI ONLY)\n+ nocsrf\nPOST    /login                                                                 com.yugabyte.yw.controllers.SessionController.login()\nGET     /platform_config                                                       com.yugabyte.yw.controllers.SessionController.getPlatformConfig()\nGET     /third_party_login                                                     com.yugabyte.yw.controllers.SessionController.thirdPartyLogin()\nGET     /insecure_login                                                        com.yugabyte.yw.controllers.SessionController.insecure_login()\nPUT     /customers/:cUUID/security                                             com.yugabyte.yw.controllers.SessionController.set_security(cUUID: java.util.UUID)\nPUT     /customers/:cUUID/api_token                                            com.yugabyte.yw.controllers.SessionController.api_token(cUUID: java.util.UUID)\nGET     /logout                                                                com.yugabyte.yw.controllers.SessionController.logout()\n+ nocsrf\nPOST    /register                                                              com.yugabyte.yw.controllers.SessionController.register()\nGET     /customers/:cUUID/password_policy                                      com.yugabyte.yw.controllers.SessionController.getPasswordPolicy(cUUID: java.util.UUID)\nGET     /ui_theme                                                              com.yugabyte.yw.controllers.SessionController.getUITheme()\n\n# -- Session specific Public API:\nGET     /session_info                                                          com.yugabyte.yw.controllers.SessionController.getSessionInfo()\nGET     /customer_count                                                        com.yugabyte.yw.controllers.SessionController.customerCount()\nGET     /app_version                                                           com.yugabyte.yw.controllers.SessionController.appVersion()\nGET     /logs/:maxLines                                                        com.yugabyte.yw.controllers.SessionController.getLogs(maxLines: Integer)\n# --\n\nGET     /customers/:cUUID/host_info                                            com.yugabyte.yw.controllers.CustomerController.getHostInfo(cUUID: java.util.UUID)\n\nGET     /prometheus_metrics                                                    com.yugabyte.yw.controllers.MetricsController.index()\n\n# Initialize cloud information.\nGET     /customers/:cUUID/regions                                              com.yugabyte.yw.controllers.RegionController.listAllRegions(cUUID: java.util.UUID)\n\n# These methods are handled by new Provider API controller\nPOST    /customers/:cUUID/providers                            com.yugabyte.yw.controllers.CloudProviderApiController.create(cUUID: java.util.UUID)\nGET     /customers/:cUUID/providers                            com.yugabyte.yw.controllers.CloudProviderApiController.list(cUUID: java.util.UUID)\nDELETE  /customers/:cUUID/providers/:pUUID                     com.yugabyte.yw.controllers.CloudProviderApiController.delete(cUUID: java.util.UUID, pUUID: java.util.UUID)\nPUT     /customers/:cUUID/providers/:pUUID/edit                com.yugabyte.yw.controllers.CloudProviderApiController.edit(cUUID: java.util.UUID, pUUID: java.util.UUID)\nPUT     /customers/:cUUID/providers/:pUUID/refresh_pricing     com.yugabyte.yw.controllers.CloudProviderApiController.refreshPricing(cUUID: java.util.UUID, pUUID: java.util.UUID)\n\n# Start UI only\nPOST    /customers/:cUUID/providers/ui                                         com.yugabyte.yw.controllers.CloudProviderUiOnlyController.create(cUUID: java.util.UUID)\nPOST    /customers/:cUUID/providers/kubernetes                                 com.yugabyte.yw.controllers.CloudProviderUiOnlyController.createKubernetes(cUUID: java.util.UUID)\nGET     /customers/:cUUID/providers/suggested_kubernetes_config                com.yugabyte.yw.controllers.CloudProviderUiOnlyController.getSuggestedKubernetesConfigs(cUUID: java.util.UUID)\nPOST    /customers/:cUUID/providers/:pUUID/bootstrap                           com.yugabyte.yw.controllers.CloudProviderUiOnlyController.bootstrap(cUUID: java.util.UUID, pUUID: java.util.UUID)\nPOST    /customers/:cUUID/providers/:pUUID/cleanup                             com.yugabyte.yw.controllers.CloudProviderUiOnlyController.cleanup(cUUID: java.util.UUID, pUUID: java.util.UUID)\nPOST    /customers/:cUUID/providers/setup_docker                               com.yugabyte.yw.controllers.CloudProviderUiOnlyController.setupDocker(cUUID: java.util.UUID)\n# ui only alias for refresh pricing. Deprecated because uses GET for state mutating method and now getting audited:\nGET     /customers/:cUUID/providers/:pUUID/initialize                          com.yugabyte.yw.controllers.CloudProviderUiOnlyController.initialize(cUUID: java.util.UUID, pUUID: java.util.UUID)\n# End Start UI only\n\nGET     /customers/:cUUID/providers/:pUUID/regions                             com.yugabyte.yw.controllers.RegionController.list(cUUID: java.util.UUID, pUUID: java.util.UUID)\nPOST    /customers/:cUUID/providers/:pUUID/regions                             com.yugabyte.yw.controllers.RegionController.create(cUUID: java.util.UUID, pUUID: java.util.UUID)\nDELETE  /customers/:cUUID/providers/:pUUID/regions/:rUUID                      com.yugabyte.yw.controllers.RegionController.delete(cUUID: java.util.UUID, pUUID: java.util.UUID, rUUID: java.util.UUID)\nGET     /customers/:cUUID/providers/:pUUID/regions/:rUUID/zones                com.yugabyte.yw.controllers.AvailabilityZoneController.list(cUUID: java.util.UUID, pUUID: java.util.UUID, rUUID: java.util.UUID)\nPOST    /customers/:cUUID/providers/:pUUID/regions/:rUUID/zones                com.yugabyte.yw.controllers.AvailabilityZoneController.create(cUUID: java.util.UUID, pUUID: java.util.UUID, rUUID: java.util.UUID)\nDELETE  /customers/:cUUID/providers/:pUUID/regions/:rUUID/zones/:azUUID        com.yugabyte.yw.controllers.AvailabilityZoneController.delete(cUUID: java.util.UUID, pUUID: java.util.UUID, rUUID: java.util.UUID, azUUID: java.util.UUID)\n\nGET     /customers/:cUUID/providers/:pUUID/instance_types/:code                com.yugabyte.yw.controllers.InstanceTypeController.index(cUUID: java.util.UUID, pUUID: java.util.UUID, code: String)\nGET     /customers/:cUUID/providers/:pUUID/instance_types                      com.yugabyte.yw.controllers.InstanceTypeController.list(cUUID: java.util.UUID, pUUID: java.util.UUID, zone: java.util.List[String] ?= java.util.Collections.emptyList())\nPOST    /customers/:cUUID/providers/:pUUID/instance_types                      com.yugabyte.yw.controllers.InstanceTypeController.create(cUUID: java.util.UUID, pUUID: java.util.UUID)\nDELETE  /customers/:cUUID/providers/:pUUID/instance_types/:code                com.yugabyte.yw.controllers.InstanceTypeController.delete(cUUID: java.util.UUID, pUUID: java.util.UUID, code: String)\n\nPOST    /customers/:cUUID/configs                                              com.yugabyte.yw.controllers.CustomerConfigController.create(cUUID: java.util.UUID)\nGET     /customers/:cUUID/configs                                              com.yugabyte.yw.controllers.CustomerConfigController.list(cUUID: java.util.UUID)\nPUT     /customers/:cUUID/configs/:configUUID                                  com.yugabyte.yw.controllers.CustomerConfigController.edit(cUUID: java.util.UUID, configUUID: java.util.UUID)\nDELETE  /customers/:cUUID/configs/:configUUID                                  com.yugabyte.yw.controllers.CustomerConfigController.delete(cUUID: java.util.UUID, configUUID: java.util.UUID)\n\n#---------------------------------------------------------------------------------------------------\n#                       Runtime Config\n#---------------------------------------------------------------------------------------------------\n# List keys that we allow configuring - no auth needed\nGET /runtime_config/mutable_keys                                   com.yugabyte.yw.controllers.RuntimeConfController.listKeys()\n\n# List of Scopes for a given customer - static scope, the global scope, current customer scope and all its\n# sub-scopes (i.e. universes and providers owned by this customer)\nGET /customers/:cUUID/runtime_config/scopes                        com.yugabyte.yw.controllers.RuntimeConfController.listScopes(cUUID: java.util.UUID)\n\n# List of runtime config key values overridden in specific scope for a customer\nGET /customers/:cUUID/runtime_config/:scope                        com.yugabyte.yw.controllers.RuntimeConfController.getConfig(cUUID: java.util.UUID, scope: java.util.UUID, includeInherited: Boolean ?= false)\n\n# any customer can see values in global scope\nGET /customers/:cUUID/runtime_config/:scope/key/:key               com.yugabyte.yw.controllers.RuntimeConfController.getKey(cUUID: java.util.UUID, scope: java.util.UUID, key: String)\n\n# If scope is for global config than only super admin can mutate that\nPUT /customers/:cUUID/runtime_config/:scope/key/:key               com.yugabyte.yw.controllers.RuntimeConfController.setKey(cUUID: java.util.UUID, scope: java.util.UUID, key: String)\nDELETE /customers/:cUUID/runtime_config/:scope/key/:key            com.yugabyte.yw.controllers.RuntimeConfController.deleteKey(cUUID: java.util.UUID, scope: java.util.UUID, key: String)\n\n#---------------------------------------------------------------------------------------------------\n\n# KMS Configuration API\nGET     /customers/:cUUID/kms_configs/:configUUID                              com.yugabyte.yw.controllers.EncryptionAtRestController.getKMSConfig(cUUID: java.util.UUID, configUUID: java.util.UUID)\nGET     /customers/:cUUID/kms_configs                                          com.yugabyte.yw.controllers.EncryptionAtRestController.listKMSConfigs(cUUID: java.util.UUID)\nPOST    /customers/:cUUID/kms_configs/:kmsProvider                             com.yugabyte.yw.controllers.EncryptionAtRestController.createKMSConfig(cUUID: java.util.UUID, kmsProvider: String)\nDELETE  /customers/:cUUID/kms_configs/:configUUID                              com.yugabyte.yw.controllers.EncryptionAtRestController.deleteKMSConfig(cUUID: java.util.UUID, configUUID: java.util.UUID)\n\n# KMS History API\nGET     /customers/:cUUID/universes/:uniUUID/kms                               com.yugabyte.yw.controllers.EncryptionAtRestController.getKeyRefHistory(cUUID: java.util.UUID, uniUUID: java.util.UUID)\nPOST    /customers/:cUUID/universes/:uniUUID/kms                               com.yugabyte.yw.controllers.EncryptionAtRestController.retrieveKey(cUUID: java.util.UUID, uniUUID: java.util.UUID)\nDELETE  /customers/:cUUID/universes/:uniUUID/kms                               com.yugabyte.yw.controllers.EncryptionAtRestController.removeKeyRefHistory(cUUID: java.util.UUID, uniUUID: java.util.UUID)\nGET     /customers/:cUUID/universes/:uniUUID/kms/key_ref                       com.yugabyte.yw.controllers.EncryptionAtRestController.getCurrentKeyRef(cUUID: java.util.UUID, uniUUID: java.util.UUID)\n\n# Customer profile API\nGET     /customers                                                             com.yugabyte.yw.controllers.CustomerController.list()\nGET     /customers_uuids                                                       com.yugabyte.yw.controllers.CustomerController.listUuids()\nGET     /customers/:cUUID                                                      com.yugabyte.yw.controllers.CustomerController.index(cUUID: java.util.UUID)\nPUT     /customers/:cUUID                                                      com.yugabyte.yw.controllers.CustomerController.update(cUUID: java.util.UUID)\nDELETE  /customers/:cUUID                                                      com.yugabyte.yw.controllers.CustomerController.delete(cUUID: java.util.UUID)\nPOST    /customers/:cUUID/metrics                                              com.yugabyte.yw.controllers.CustomerController.metrics(cUUID: java.util.UUID)\n\n# Customer features API\nPUT     /customers/:cUUID/features                                             com.yugabyte.yw.controllers.CustomerController.upsertFeatures(cUUID: java.util.UUID)\n\n# Release management API\nGET     /customers/:cUUID/releases                                             com.yugabyte.yw.controllers.ReleaseController.list(cUUID: java.util.UUID, includeMetadata: Boolean ?= false)\nPUT     /customers/:cUUID/releases                                             com.yugabyte.yw.controllers.ReleaseController.refresh(cUUID: java.util.UUID)\nPOST    /customers/:cUUID/releases                                             com.yugabyte.yw.controllers.ReleaseController.create(cUUID: java.util.UUID)\nPUT     /customers/:cUUID/releases/:name                                       com.yugabyte.yw.controllers.ReleaseController.update(cUUID: java.util.UUID, name: String)\n\n# Certificate API\nPOST    /customers/:cUUID/certificates                                         com.yugabyte.yw.controllers.CertificateController.upload(cUUID: java.util.UUID)\nGET     /customers/:cUUID/certificates                                         com.yugabyte.yw.controllers.CertificateController.list(cUUID: java.util.UUID)\nDELETE  /customers/:cUUID/certificates/:rUUID                                  com.yugabyte.yw.controllers.CertificateController.delete(cUUID: java.util.UUID, rUUID: java.util.UUID)\nGET     /customers/:cUUID/certificates/:name                                   com.yugabyte.yw.controllers.CertificateController.get(cUUID: java.util.UUID, name: String)\nGET     /customers/:cUUID/certificates/:rUUID/download                         com.yugabyte.yw.controllers.CertificateController.getRootCert(cUUID: java.util.UUID, rUUID: java.util.UUID)\nPOST    /customers/:cUUID/certificates/:rUUID                                  com.yugabyte.yw.controllers.CertificateController.getClientCert(cUUID: java.util.UUID, rUUID: java.util.UUID)\nPOST    /customers/:cUUID/certificates/:rUUID/update_empty_cert                com.yugabyte.yw.controllers.CertificateController.updateEmptyCustomCert(cUUID: java.util.UUID, rUUID: java.util.UUID)\n\n\n# Alerts API\nGET     /customers/:cUUID/alerts                                               com.yugabyte.yw.controllers.AlertController.list(cUUID: java.util.UUID)\nGET     /customers/:cUUID/alerts/active                                        com.yugabyte.yw.controllers.AlertController.listActive(cUUID: java.util.UUID)\nGET     /customers/:cUUID/alerts/:alertUUID                                    com.yugabyte.yw.controllers.AlertController.get(cUUID: java.util.UUID, alertUUID: java.util.UUID)\nPOST    /customers/:cUUID/alerts/page                                          com.yugabyte.yw.controllers.AlertController.pageAlerts(cUUID: java.util.UUID)\nPOST    /customers/:cUUID/alerts/acknowledge                                   com.yugabyte.yw.controllers.AlertController.acknowledgeByFilter(cUUID: java.util.UUID)\nPOST    /customers/:cUUID/alerts/:alertUUID/acknowledge                        com.yugabyte.yw.controllers.AlertController.acknowledge(cUUID: java.util.UUID, alertUUID: java.util.UUID)\nPOST    /customers/:cUUID/alert_templates                                      com.yugabyte.yw.controllers.AlertController.listAlertTemplates(cUUID: java.util.UUID)\nGET     /customers/:cUUID/alert_configurations/:configurationUUID              com.yugabyte.yw.controllers.AlertController.getAlertConfiguration(cUUID: java.util.UUID, configurationUUID: java.util.UUID)\nPOST    /customers/:cUUID/alert_configurations/page                            com.yugabyte.yw.controllers.AlertController.pageAlertConfigurations(cUUID: java.util.UUID)\nPOST    /customers/:cUUID/alert_configurations/list                            com.yugabyte.yw.controllers.AlertController.listAlertConfigurations(cUUID: java.util.UUID)\nPOST    /customers/:cUUID/alert_configurations                                 com.yugabyte.yw.controllers.AlertController.createAlertConfiguration(cUUID: java.util.UUID)\nPUT     /customers/:cUUID/alert_configurations/:configurationUUID              com.yugabyte.yw.controllers.AlertController.updateAlertConfiguration(cUUID: java.util.UUID, configurationUUID: java.util.UUID)\nDELETE  /customers/:cUUID/alert_configurations/:configurationUUID              com.yugabyte.yw.controllers.AlertController.deleteAlertConfiguration(cUUID: java.util.UUID, configurationUUID: java.util.UUID)\n\nPOST    /customers/:cUUID/alert_channels                                       com.yugabyte.yw.controllers.AlertController.createAlertChannel(cUUID: java.util.UUID)\nGET     /customers/:cUUID/alert_channels                                       com.yugabyte.yw.controllers.AlertController.listAlertChannels(cUUID: java.util.UUID)\nGET     /customers/:cUUID/alert_channels/:acUUID                               com.yugabyte.yw.controllers.AlertController.getAlertChannel(cUUID: java.util.UUID, acUUID: java.util.UUID)\nPUT     /customers/:cUUID/alert_channels/:acUUID                               com.yugabyte.yw.controllers.AlertController.updateAlertChannel(cUUID: java.util.UUID, acUUID: java.util.UUID)\nDELETE  /customers/:cUUID/alert_channels/:acUUID                               com.yugabyte.yw.controllers.AlertController.deleteAlertChannel(cUUID: java.util.UUID, acUUID: java.util.UUID)\n\nPOST    /customers/:cUUID/alert_destinations                                   com.yugabyte.yw.controllers.AlertController.createAlertDestination(cUUID: java.util.UUID)\nGET     /customers/:cUUID/alert_destinations                                   com.yugabyte.yw.controllers.AlertController.listAlertDestinations(cUUID: java.util.UUID)\nGET     /customers/:cUUID/alert_destinations/:adUUID                           com.yugabyte.yw.controllers.AlertController.getAlertDestination(cUUID: java.util.UUID, adUUID: java.util.UUID)\nPUT     /customers/:cUUID/alert_destinations/:adUUID                           com.yugabyte.yw.controllers.AlertController.updateAlertDestination(cUUID: java.util.UUID, adUUID: java.util.UUID)\nDELETE  /customers/:cUUID/alert_destinations/:adUUID                           com.yugabyte.yw.controllers.AlertController.deleteAlertDestination(cUUID: java.util.UUID, adUUID: java.util.UUID)\n\n# Access Key API\nGET     /customers/:cUUID/providers/:pUUID/access_keys/:keyCode                com.yugabyte.yw.controllers.AccessKeyController.index(cUUID: java.util.UUID, pUUID: java.util.UUID, keyCode: String)\nGET     /customers/:cUUID/providers/:pUUID/access_keys                         com.yugabyte.yw.controllers.AccessKeyController.list(cUUID: java.util.UUID, pUUID: java.util.UUID)\nPOST    /customers/:cUUID/providers/:pUUID/access_keys                         com.yugabyte.yw.controllers.AccessKeyController.create(cUUID: java.util.UUID, pUUID: java.util.UUID)\nDELETE  /customers/:cUUID/providers/:pUUID/access_keys/:keyCode                com.yugabyte.yw.controllers.AccessKeyController.delete(cUUID: java.util.UUID, pUUID: java.util.UUID, keyCode: String)\n\n# ----------------------------- START OLD API -------------------------------------------\n# UI_ONLY: This is info request that relies on universe data being posted hence DEPRECATED\nPOST    /customers/:cUUID/universe_resources                                   com.yugabyte.yw.controllers.UniverseUiOnlyController.getUniverseResourcesOld(cUUID: java.util.UUID)\n# Deprecated: Instead use list with name query param. TODO: This is easy to get rid in UI\nGET     /customers/:cUUID/universes/find                                       com.yugabyte.yw.controllers.UniverseUiOnlyController.find(cUUID: java.util.UUID, name: String)\n\n# Universe CRUD operations UI_ONLY. See alternate new API below\nPOST    /customers/:cUUID/universes                                            com.yugabyte.yw.controllers.UniverseUiOnlyController.create(cUUID: java.util.UUID)\nPOST    /customers/:cUUID/universe_configure                                   com.yugabyte.yw.controllers.UniverseUiOnlyController.configure(cUUID: java.util.UUID)\nPUT     /customers/:cUUID/universes/:uniUUID                                   com.yugabyte.yw.controllers.UniverseUiOnlyController.update(cUUID: java.util.UUID, uniUUID: java.util.UUID)\nPOST    /customers/:cUUID/universes/:uniUUID/upgrade                           com.yugabyte.yw.controllers.UniverseUiOnlyController.upgrade(cUUID: java.util.UUID, uniUUID: java.util.UUID)\nPOST    /customers/:cUUID/universes/:uniUUID/update_tls                        com.yugabyte.yw.controllers.UniverseUiOnlyController.tlsConfigUpdate(cUUID: java.util.UUID, uniUUID: java.util.UUID)\n\n# TODO: migrate to new API\nPOST    /customers/:cUUID/universes/:uniUUID/disk_update                       com.yugabyte.yw.controllers.UniverseUiOnlyController.updateDiskSize(cUUID: java.util.UUID, uniUUID: java.util.UUID)\n\n# Cluster under universe UI_ONLY\nPOST    /customers/:cUUID/universes/:uniUUID/cluster                           com.yugabyte.yw.controllers.UniverseUiOnlyController.clusterCreate(cUUID: java.util.UUID, uniUUID: java.util.UUID)\nDELETE  /customers/:cUUID/universes/:uniUUID/cluster/:clustUUID                com.yugabyte.yw.controllers.UniverseUiOnlyController.clusterDelete(cUUID: java.util.UUID, uniUUID: java.util.UUID, clustUUID: java.util.UUID, isForceDelete: Boolean ?= false)\n# ----------------------------- END OLD API -------------------------------------------\n\n# ----------------------------- START NEW API -------------------------------------------\n# universe create is now one-shot-configure-and-create-all-clusters for a universe\nPOST    /customers/:cUUID/universes/clusters                                   com.yugabyte.yw.controllers.UniverseClustersController.createAllClusters(cUUID: java.util.UUID)\n\n# Universe update now split into two cluster updates\nPUT     /customers/:cUUID/universes/:uniUUID/clusters/primary                  com.yugabyte.yw.controllers.UniverseClustersController.updatePrimaryCluster(cUUID: java.util.UUID, uniUUID: java.util.UUID)\nPUT     /customers/:cUUID/universes/:uniUUID/clusters/read_only                 com.yugabyte.yw.controllers.UniverseClustersController.updateReadOnlyCluster(cUUID: java.util.UUID, uniUUID: java.util.UUID)\n\n# Add and remove read_only cluster on existing universe\nPOST    /customers/:cUUID/universes/:uniUUID/clusters/read_only                 com.yugabyte.yw.controllers.UniverseClustersController.createReadOnlyCluster(cUUID: java.util.UUID, uniUUID: java.util.UUID)\nDELETE  /customers/:cUUID/universes/:uniUUID/clusters/read_only/:clustUUID      com.yugabyte.yw.controllers.UniverseClustersController.deleteReadonlyCluster(cUUID: java.util.UUID, uniUUID: java.util.UUID, clustUUID: java.util.UUID, isForceDelete: Boolean ?= false)\n# ----------------------------- END NEW API -------------------------------------------\n\n# Universe Read and Delete operations stays same as old and moved to become part of the new API\nGET     /customers/:cUUID/universes                                            com.yugabyte.yw.controllers.UniverseController.list(cUUID: java.util.UUID, name: String ?= null)\nGET     /customers/:cUUID/universes/:uniUUID                                   com.yugabyte.yw.controllers.UniverseController.index(cUUID: java.util.UUID, uniUUID: java.util.UUID)\nDELETE  /customers/:cUUID/universes/:uniUUID                                   com.yugabyte.yw.controllers.UniverseController.destroy(cUUID: java.util.UUID, uniUUID: java.util.UUID, isForceDelete:Boolean ?= false, isDeleteBackups:Boolean ?= false, isDeleteAssociatedCerts:Boolean ?= false)\n\n# Universe Info like status, cost, query stats, health, resource usage\nGET     /customers/:cUUID/universes/:uniUUID/status                            com.yugabyte.yw.controllers.UniverseInfoController.universeStatus(cUUID: java.util.UUID, uniUUID: java.util.UUID)\nGET     /customers/:cUUID/universes/:uniUUID/health_check                      com.yugabyte.yw.controllers.UniverseInfoController.healthCheck(cUUID: java.util.UUID, uniUUID: java.util.UUID)\nGET     /customers/:cUUID/cost                                                 com.yugabyte.yw.controllers.UniverseInfoController.universeListCost(cUUID: java.util.UUID)\nGET     /customers/:cUUID/universes/:uniUUID/cost                              com.yugabyte.yw.controllers.UniverseInfoController.universeCost(cUUID: java.util.UUID, uniUUID: java.util.UUID)\nGET     /customers/:cUUID/universes/:uniUUID/universe_resources                com.yugabyte.yw.controllers.UniverseInfoController.getUniverseResources(cUUID: java.util.UUID, uniUUID: java.util.UUID)\nGET     /customers/:cUUID/universes/:uniUUID/leader                            com.yugabyte.yw.controllers.UniverseInfoController.getMasterLeaderIP(cUUID: java.util.UUID, uniUUID: java.util.UUID)\nGET     /customers/:cUUID/universes/:uniUUID/live_queries                      com.yugabyte.yw.controllers.UniverseInfoController.getLiveQueries(cUUID: java.util.UUID, uniUUID: java.util.UUID)\nGET     /customers/:cUUID/universes/:uniUUID/slow_queries                      com.yugabyte.yw.controllers.UniverseInfoController.getSlowQueries(cUUID: java.util.UUID, uniUUID: java.util.UUID)\nDELETE  /customers/:cUUID/universes/:uniUUID/slow_queries                      com.yugabyte.yw.controllers.UniverseInfoController.resetSlowQueries(cUUID: java.util.UUID, uniUUID: java.util.UUID)\nGET     /customers/:cUUID/universes/:uniUUID/:nodeName/download_logs           com.yugabyte.yw.controllers.UniverseInfoController.downloadNodeLogs(cUUID: java.util.UUID, uniUUID: java.util.UUID, nodeName: String)\n\n# Import a universe\nPOST    /customers/:cUUID/universes/import                                     com.yugabyte.yw.controllers.ImportController.importUniverse(cUUID: java.util.UUID)\n\n# Universe - info about Yugabyte DB master node\nGET     /customers/:cUUID/universes/:uniUUID/masters                           com.yugabyte.yw.controllers.MetaMasterController.getMasterAddresses(cUUID: java.util.UUID, uniUUID: java.util.UUID)\nGET     /customers/:cUUID/universes/:uniUUID/yqlservers                        com.yugabyte.yw.controllers.MetaMasterController.getYQLServerAddresses(cUUID: java.util.UUID, uniUUID: java.util.UUID)\nGET     /customers/:cUUID/universes/:uniUUID/ysqlservers                       com.yugabyte.yw.controllers.MetaMasterController.getYSQLServerAddresses(cUUID: java.util.UUID, uniUUID: java.util.UUID)\nGET     /customers/:cUUID/universes/:uniUUID/redisservers                      com.yugabyte.yw.controllers.MetaMasterController.getRedisServerAddresses(cUUID: java.util.UUID, uniUUID: java.util.UUID)\n\n# Universe - Yugabyte DB management\nPOST    /customers/:cUUID/universes/:uniUUID/run_query                         com.yugabyte.yw.controllers.UniverseYbDbAdminController.runQuery(cUUID: java.util.UUID, uniUUID: java.util.UUID)\nPOST    /customers/:cUUID/universes/:uniUUID/run_in_shell                      com.yugabyte.yw.controllers.UniverseYbDbAdminController.runInShell(cUUID: java.util.UUID, uniUUID: java.util.UUID)\nPOST    /customers/:cUUID/universes/:uniUUID/update_db_credentials             com.yugabyte.yw.controllers.UniverseYbDbAdminController.setDatabaseCredentials(cUUID: java.util.UUID, uniUUID: java.util.UUID)\nPOST    /customers/:cUUID/universes/:uniUUID/create_db_credentials             com.yugabyte.yw.controllers.UniverseYbDbAdminController.createUserInDB(cUUID: java.util.UUID, uniUUID: java.util.UUID)\n\n# Universe Actions\nPOST    /customers/:cUUID/universes/:uniUUID/pause                             com.yugabyte.yw.controllers.UniverseActionsController.pause(cUUID: java.util.UUID, uniUUID: java.util.UUID)\nPOST    /customers/:cUUID/universes/:uniUUID/resume                            com.yugabyte.yw.controllers.UniverseActionsController.resume(cUUID: java.util.UUID, uniUUID: java.util.UUID)\nPUT     /customers/:cUUID/universes/:uniUUID/mark_helm3_compatible             com.yugabyte.yw.controllers.UniverseActionsController.setHelm3Compatible(cUUID: java.util.UUID, uniUUID: java.util.UUID)\nPUT     /customers/:cUUID/universes/:uniUUID/setup_universe_2dc                com.yugabyte.yw.controllers.UniverseActionsController.resetVersion(cUUID: java.util.UUID, uniUUID: java.util.UUID)\nPUT     /customers/:cUUID/universes/:uniUUID/update_backup_state               com.yugabyte.yw.controllers.UniverseActionsController.setBackupFlag(cUUID: java.util.UUID, uniUUID: java.util.UUID, markActive: Boolean)\nPOST    /customers/:cUUID/universes/:uniUUID/config_alerts                     com.yugabyte.yw.controllers.UniverseActionsController.configureAlerts(cUUID: java.util.UUID, uniUUID: java.util.UUID)\nPOST    /customers/:cUUID/universes/:uniUUID/set_key                           com.yugabyte.yw.controllers.UniverseActionsController.setUniverseKey(cUUID: java.util.UUID, uniUUID: java.util.UUID)\nPOST    /customers/:cUUID/universes/:uniUUID/toggle_tls                        com.yugabyte.yw.controllers.UniverseActionsController.toggleTls(cUUID: java.util.UUID, uniUUID: java.util.UUID)\n\n# xCluster Replication management\nPOST    /customers/:cUUID/universes/:uniUUID/xcluster_replication              com.yugabyte.yw.controllers.XClusterReplicationController.create(cUUID: java.util.UUID, uniUUID: java.util.UUID)\nPUT     /customers/:cUUID/universes/:uniUUID/xcluster_replication              com.yugabyte.yw.controllers.XClusterReplicationController.edit(cUUID: java.util.UUID, uniUUID: java.util.UUID)\nDELETE  /customers/:cUUID/universes/:uniUUID/xcluster_replication              com.yugabyte.yw.controllers.XClusterReplicationController.delete(cUUID: java.util.UUID, uniUUID: java.util.UUID)\nPUT     /customers/:cUUID/universes/:uniUUID/pause_xcluster_replication        com.yugabyte.yw.controllers.XClusterReplicationController.pause(cUUID: java.util.UUID, uniUUID: java.util.UUID)\nPUT     /customers/:cUUID/universes/:uniUUID/resume_xcluster_replication       com.yugabyte.yw.controllers.XClusterReplicationController.resume(cUUID: java.util.UUID, uniUUID: java.util.UUID)\n\n# Universe upgrade API\nPOST    /customers/:cUUID/universes/:uniUUID/upgrade/restart                   com.yugabyte.yw.controllers.UpgradeUniverseController.restartUniverse(cUUID: java.util.UUID, uniUUID: java.util.UUID)\nPOST    /customers/:cUUID/universes/:uniUUID/upgrade/software                  com.yugabyte.yw.controllers.UpgradeUniverseController.upgradeSoftware(cUUID: java.util.UUID, uniUUID: java.util.UUID)\nPOST    /customers/:cUUID/universes/:uniUUID/upgrade/gflags                    com.yugabyte.yw.controllers.UpgradeUniverseController.upgradeGFlags(cUUID: java.util.UUID, uniUUID: java.util.UUID)\nPOST    /customers/:cUUID/universes/:uniUUID/upgrade/certs                     com.yugabyte.yw.controllers.UpgradeUniverseController.upgradeCerts(cUUID: java.util.UUID, uniUUID: java.util.UUID)\nPOST    /customers/:cUUID/universes/:uniUUID/upgrade/tls                       com.yugabyte.yw.controllers.UpgradeUniverseController.upgradeTls(cUUID: java.util.UUID, uniUUID: java.util.UUID)\nPOST    /customers/:cUUID/universes/:uniUUID/upgrade/vm                        com.yugabyte.yw.controllers.UpgradeUniverseController.upgradeVMImage(cUUID: java.util.UUID, uniUUID: java.util.UUID)\n\n# Table Management API\nGET     /customers/:cUUID/universes/:uniUUID/tables                            com.yugabyte.yw.controllers.TablesController.listTables(cUUID: java.util.UUID, uniUUID: java.util.UUID)\nPOST    /customers/:cUUID/universes/:uniUUID/tables                            com.yugabyte.yw.controllers.TablesController.create(cUUID: java.util.UUID, uniUUID: java.util.UUID)\nGET     /customers/:cUUID/universes/:uniUUID/tables/:tableUUID                 com.yugabyte.yw.controllers.TablesController.describe(cUUID: java.util.UUID, uniUUID: java.util.UUID, tableUUID: java.util.UUID)\nPUT     /customers/:cUUID/universes/:uniUUID/tables/:tableUUID                 com.yugabyte.yw.controllers.TablesController.alter(cUUID: java.util.UUID, uniUUID: java.util.UUID, tableUUID: java.util.UUID)\nDELETE  /customers/:cUUID/universes/:uniUUID/tables/:tableUUID                 com.yugabyte.yw.controllers.TablesController.drop(cUUID: java.util.UUID, uniUUID: java.util.UUID, tableUUID: java.util.UUID)\nPUT     /customers/:cUUID/universes/:uniUUID/tables/:tableUUID/bulk_import     com.yugabyte.yw.controllers.TablesController.bulkImport(cUUID: java.util.UUID, uniUUID: java.util.UUID, tableUUID: java.util.UUID)\nPUT     /customers/:cUUID/universes/:uniUUID/tables/:tableUUID/create_backup   com.yugabyte.yw.controllers.TablesController.createBackup(cUUID: java.util.UUID, uniUUID: java.util.UUID, tableUUID: java.util.UUID)\nPUT     /customers/:cUUID/universes/:uniUUID/multi_table_backup                com.yugabyte.yw.controllers.TablesController.createMultiTableBackup(cUUID: java.util.UUID, uniUUID: java.util.UUID)\nGET     /customers/:cUUID/universes/:uniUUID/backups                           com.yugabyte.yw.controllers.BackupsController.list(cUUID: java.util.UUID, uniUUID: java.util.UUID)\nGET     /customers/:cUUID/universes/:uniUUID/backups/tasks/:tUUID              com.yugabyte.yw.controllers.BackupsController.fetchBackupsByTaskUUID(cUUID: java.util.UUID, uniUUID: java.util.UUID, tUUID: java.util.UUID)\nPOST    /customers/:cUUID/universes/:uniUUID/backups/restore                   com.yugabyte.yw.controllers.BackupsController.restore(cUUID: java.util.UUID, uniUUID: java.util.UUID)\nDELETE  /customers/:cUUID/backups                                              com.yugabyte.yw.controllers.BackupsController.delete(cUUID: java.util.UUID)\nPOST    /customers/:cUUID/backups/:backupUUID/stop                             com.yugabyte.yw.controllers.BackupsController.stop(cUUID: java.util.UUID, backupUUID: java.util.UUID)\n\n# Task History API\nGET    /customers/:cUUID/tasks                                                 com.yugabyte.yw.controllers.CustomerTaskController.list(cUUID: java.util.UUID)\nGET    /customers/:cUUID/tasks_list                                            com.yugabyte.yw.controllers.CustomerTaskController.tasksList(cUUID: java.util.UUID, uUUID: java.util.UUID ?= null)\nGET    /customers/:cUUID/tasks/:tUUID                                          com.yugabyte.yw.controllers.CustomerTaskController.taskStatus(cUUID: java.util.UUID, tUUID: java.util.UUID)\nPOST   /customers/:cUUID/tasks/:tUUID                                          com.yugabyte.yw.controllers.CustomerTaskController.retryTask(cUUID: java.util.UUID, tUUID: java.util.UUID)\nGET    /customers/:cUUID/universes/:uniUUID/tasks                              com.yugabyte.yw.controllers.CustomerTaskController.universeTasks(cUUID: java.util.UUID, uniUUID: java.util.UUID)\nGET    /customers/:cUUID/tasks/:tUUID/failed                                   com.yugabyte.yw.controllers.CustomerTaskController.failedSubtasks(cUUID: java.util.UUID, tUUID: java.util.UUID)\n\n# Node Management API\nGET    /customers/:cUUID/nodes/:nodeUUID/list                                  com.yugabyte.yw.controllers.NodeInstanceController.get(cUUID: java.util.UUID, nodeUUID: java.util.UUID)\nGET    /customers/:cUUID/zones/:azUUID/nodes/list                              com.yugabyte.yw.controllers.NodeInstanceController.listByZone(cUUID: java.util.UUID, azUUID: java.util.UUID)\nGET    /customers/:cUUID/providers/:pUUID/nodes/list                           com.yugabyte.yw.controllers.NodeInstanceController.listByProvider(cUUID: java.util.UUID, pUUID: java.util.UUID)\nPOST   /customers/:cUUID/zones/:azUUID/nodes                                   com.yugabyte.yw.controllers.NodeInstanceController.create(cUUID: java.util.UUID, azUUID: java.util.UUID)\nDELETE /customers/:cUUID/providers/:pUUID/instances/:instanceIP                com.yugabyte.yw.controllers.NodeInstanceController.deleteInstance(cUUID: java.util.UUID, pUUID: java.util.UUID, instanceIP: String)\nPUT    /customers/:cUUID/universes/:universeUUID/nodes/:nodeName               com.yugabyte.yw.controllers.NodeInstanceController.nodeAction(cUUID: java.util.UUID, universeUUID: java.util.UUID, nodeName: String)\n\n# Metadata API\nGET    /metadata/column_types                                                  com.yugabyte.yw.controllers.TablesController.getColumnTypes()\nGET    /metadata/yql_data_types                                                com.yugabyte.yw.controllers.TablesController.getYQLDataTypes()\nGET    /metadata/ebs_types                                                     com.yugabyte.yw.controllers.InstanceTypeController.getEBSTypes()\nGET    /metadata/gcp_types                                                     com.yugabyte.yw.controllers.InstanceTypeController.getGCPTypes()\nGET    /metadata/azu_types                                                     com.yugabyte.yw.controllers.InstanceTypeController.getAZUTypes()\n\n# Schedule Management API\nGET    /customers/:cUUID/schedules                                             com.yugabyte.yw.controllers.ScheduleController.list(cUUID: java.util.UUID)\nDELETE /customers/:cUUID/schedules/:sUUID                                      com.yugabyte.yw.controllers.ScheduleController.delete(cUUID: java.util.UUID, sUUID: java.util.UUID)\n\nGET    /customers/:cUUID/universes/:uniUUID/tablet-servers                     com.yugabyte.yw.controllers.TabletServerController.listTabletServers(cUUID: java.util.UUID, uniUUID: java.util.UUID)\n\n# User Management API\nGET    /customers/:cUUID/users                                                 com.yugabyte.yw.controllers.UsersController.list(cUUID: java.util.UUID)\nGET    /customers/:cUUID/users/:uUUID                                          com.yugabyte.yw.controllers.UsersController.index(cUUID: java.util.UUID, uUUID: java.util.UUID)\nPOST   /customers/:cUUID/users                                                 com.yugabyte.yw.controllers.UsersController.create(cUUID: java.util.UUID)\nPUT    /customers/:cUUID/users/:uUUID                                          com.yugabyte.yw.controllers.UsersController.changeRole(cUUID: java.util.UUID, uUUID: java.util.UUID, role: String)\nPUT    /customers/:cUUID/users/:uUUID/change_password                          com.yugabyte.yw.controllers.UsersController.changePassword(cUUID: java.util.UUID, uUUID: java.util.UUID)\nDELETE /customers/:cUUID/users/:uUUID                                          com.yugabyte.yw.controllers.UsersController.delete(cUUID: java.util.UUID, uUUID: java.util.UUID)\n\n# Audit Info API\nGET    /customers/:cUUID/users/:uUUID/audit_trail                              com.yugabyte.yw.controllers.AuditController.list(cUUID: java.util.UUID, uUUID: java.util.UUID)\nGET    /customers/:cUUID/tasks/:tUUID/audit_info                               com.yugabyte.yw.controllers.AuditController.getTaskAudit(cUUID: java.util.UUID, tUUID: java.util.UUID)\nGET    /customers/:cUUID/tasks/:tUUID/audit_user                               com.yugabyte.yw.controllers.AuditController.getUserFromTask(cUUID: java.util.UUID, tUUID: java.util.UUID)\n\nGET     /index                                                                 com.yugabyte.yw.controllers.ApiDiscoveryController.index()\n\nGET    /callback                                                               @org.pac4j.play.CallbackController.callback()\nPOST   /callback                                                               @org.pac4j.play.CallbackController.callback()\nGET    /third_party_logout                                                     @org.pac4j.play.LogoutController.logout()\n\n# HA Backup API\nPUT    /settings/ha/config/:cUUID/replication_schedule/start                   com.yugabyte.yw.controllers.PlatformReplicationController.startPeriodicBackup(cUUID: java.util.UUID)\nPUT    /settings/ha/config/:cUUID/replication_schedule/stop                    com.yugabyte.yw.controllers.PlatformReplicationController.stopPeriodicBackup(cUUID: java.util.UUID)\nGET    /settings/ha/config/:cUUID/replication_schedule                         com.yugabyte.yw.controllers.PlatformReplicationController.getBackupInfo(cUUID: java.util.UUID)\nGET    /settings/ha/config/:cUUID/backup/list                                  com.yugabyte.yw.controllers.PlatformReplicationController.listBackups(cUUID: java.util.UUID, leader: String ?= null)\n\n# HA Configuration API\nGET    /settings/ha/generate_key                                               com.yugabyte.yw.controllers.HAController.generateClusterKey\nGET    /settings/ha/config                                                     com.yugabyte.yw.controllers.HAController.getHAConfig\nPOST   /settings/ha/config                                                     com.yugabyte.yw.controllers.HAController.createHAConfig\nPUT    /settings/ha/config/:cUUID                                              com.yugabyte.yw.controllers.HAController.editHAConfig(cUUID: java.util.UUID)\nDELETE /settings/ha/config/:cUUID                                              com.yugabyte.yw.controllers.HAController.deleteHAConfig(cUUID: java.util.UUID)\n\n# HA Platform Instance API\nPOST   /settings/ha/config/:cUUID/instance                                     com.yugabyte.yw.controllers.PlatformInstanceController.createInstance(cUUID: java.util.UUID)\nDELETE /settings/ha/config/:cUUID/instance/:iUUID                              com.yugabyte.yw.controllers.PlatformInstanceController.deleteInstance(cUUID: java.util.UUID, iUUID: java.util.UUID)\nPOST   /settings/ha/config/:cUUID/instance/:iUUID/promote                      com.yugabyte.yw.controllers.PlatformInstanceController.promoteInstance(cUUID: java.util.UUID, iUUID: java.util.UUID, curLeader: String ?= null)\nGET    /settings/ha/config/:cUUID/instance/local                               com.yugabyte.yw.controllers.PlatformInstanceController.getLocal(cUUID: java.util.UUID)\n\n# HA API for inter-node communication\nGET    /settings/ha/internal/config                                            com.yugabyte.yw.controllers.InternalHAController.getHAConfigByClusterKey\nPUT    /settings/ha/internal/config/demote/:timestamp                          com.yugabyte.yw.controllers.InternalHAController.demoteLocalLeader(timestamp: Long)\nPUT    /settings/ha/internal/config/sync/:timestamp                            com.yugabyte.yw.controllers.InternalHAController.syncInstances(timestamp: Long)\nPOST   /settings/ha/internal/upload                                            com.yugabyte.yw.controllers.InternalHAController.syncBackups()\n\n# Schedule External Script API\nPOST   /customers/:cUUID/universes/:uniUUID/schedule_script                    com.yugabyte.yw.controllers.ScheduleScriptController.externalScriptSchedule(cUUID: java.util.UUID, uniUUID : java.util.UUID)\nPUT    /customers/:cUUID/universes/:uniUUID/stop_scheduled_script              com.yugabyte.yw.controllers.ScheduleScriptController.stopScheduledScript(cUUID: java.util.UUID, uniUUID : java.util.UUID)\nPUT    /customers/:cUUID/universes/:uniUUID/update_scheduled_script            com.yugabyte.yw.controllers.ScheduleScriptController.updateScheduledScript(cUUID: java.util.UUID, uniUUID : java.util.UUID)\n"
    },
    {
      "file": "managed/src/main/java/com/yugabyte/yw/controllers/CertificateController.java",
      "description": "The API call triggers this upload method.\r\n\r\nThe annotations on top of the upload method are not relevant to Play itself. They help generate an [OpenAPI spec file](https://blog.apideck.com/introduction-to-openapi-specification) that documents the complete API for clients (as of 9/12/21 our UI does not use openapi clients)\r\n\r\nThe JSON input to the API is serialized into a `Form` class (ClientCertParams) using the [play forms library](https://www.playframework.com/documentation/2.8.x/JavaForms). To accept a new field to this API, we first need to add a new field to the corresponding `Form` class.\r\n\r\n",
      "line": 46,
      "contents": "package com.yugabyte.yw.controllers;\n\nimport com.fasterxml.jackson.databind.node.ObjectNode;\nimport com.google.inject.Inject;\nimport com.yugabyte.yw.common.CertificateDetails;\nimport com.yugabyte.yw.common.CertificateHelper;\nimport com.yugabyte.yw.common.PlatformServiceException;\nimport com.yugabyte.yw.common.config.RuntimeConfigFactory;\nimport com.yugabyte.yw.forms.CertificateParams;\nimport com.yugabyte.yw.forms.ClientCertParams;\nimport com.yugabyte.yw.forms.PlatformResults;\nimport com.yugabyte.yw.forms.PlatformResults.YBPError;\nimport com.yugabyte.yw.forms.PlatformResults.YBPSuccess;\nimport com.yugabyte.yw.models.CertificateInfo;\nimport com.yugabyte.yw.models.Customer;\nimport io.swagger.annotations.Api;\nimport io.swagger.annotations.ApiImplicitParam;\nimport io.swagger.annotations.ApiImplicitParams;\nimport io.swagger.annotations.ApiOperation;\nimport io.swagger.annotations.ApiResponses;\nimport io.swagger.annotations.Authorization;\nimport java.util.Date;\nimport java.util.List;\nimport java.util.UUID;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport play.data.Form;\nimport play.libs.Json;\nimport play.mvc.Result;\n\n@Api(\n    value = \"Certificate Info\",\n    authorizations = @Authorization(AbstractPlatformController.API_KEY_AUTH))\npublic class CertificateController extends AuthenticatedController {\n  public static final Logger LOG = LoggerFactory.getLogger(CertificateController.class);\n  @Inject private RuntimeConfigFactory runtimeConfigFactory;\n\n  @ApiOperation(value = \"Restore a certificate from backup\", response = UUID.class)\n  @ApiImplicitParams(\n      @ApiImplicitParam(\n          name = \"certificate\",\n          value = \"certificate params of the backup to be restored\",\n          paramType = \"body\",\n          dataType = \"com.yugabyte.yw.forms.CertificateParams\",\n          required = true))\n  public Result upload(UUID customerUUID) {\n    Customer.getOrBadRequest(customerUUID);\n    Form<CertificateParams> formData = formFactory.getFormDataOrBadRequest(CertificateParams.class);\n\n    Date certStart = new Date(formData.get().certStart);\n    Date certExpiry = new Date(formData.get().certExpiry);\n    String label = formData.get().label;\n    CertificateInfo.Type certType = formData.get().certType;\n    String certContent = formData.get().certContent;\n    String keyContent = formData.get().keyContent;\n    CertificateParams.CustomCertInfo customCertInfo = formData.get().customCertInfo;\n    CertificateParams.CustomServerCertData customServerCertData =\n        formData.get().customServerCertData;\n    switch (certType) {\n      case SelfSigned:\n        {\n          if (certContent == null || keyContent == null) {\n            throw new PlatformServiceException(\n                BAD_REQUEST, \"Certificate or Keyfile can't be null.\");\n          }\n          break;\n        }\n      case CustomCertHostPath:\n        {\n          if (customCertInfo == null) {\n            throw new PlatformServiceException(BAD_REQUEST, \"Custom Cert Info must be provided.\");\n          } else if (customCertInfo.nodeCertPath == null\n              || customCertInfo.nodeKeyPath == null\n              || customCertInfo.rootCertPath == null) {\n            throw new PlatformServiceException(BAD_REQUEST, \"Custom Cert Paths can't be empty.\");\n          }\n          break;\n        }\n      case CustomServerCert:\n        {\n          if (customServerCertData == null) {\n            throw new PlatformServiceException(\n                BAD_REQUEST, \"Custom Server Cert Info must be provided.\");\n          } else if (customServerCertData.serverCertContent == null\n              || customServerCertData.serverKeyContent == null) {\n            throw new PlatformServiceException(\n                BAD_REQUEST, \"Custom Server Cert and Key content can't be empty.\");\n          }\n          break;\n        }\n      default:\n        {\n          throw new PlatformServiceException(BAD_REQUEST, \"certType should be valid.\");\n        }\n    }\n    LOG.info(\"CertificateController: upload cert label {}, type {}\", label, certType);\n    UUID certUUID =\n        CertificateHelper.uploadRootCA(\n            label,\n            customerUUID,\n            runtimeConfigFactory.staticApplicationConf().getString(\"yb.storage.path\"),\n            certContent,\n            keyContent,\n            certStart,\n            certExpiry,\n            certType,\n            customCertInfo,\n            customServerCertData);\n    auditService().createAuditEntry(ctx(), request(), Json.toJson(formData.data()));\n    return PlatformResults.withData(certUUID);\n  }\n\n  @ApiOperation(value = \"Add a client certificate\", response = CertificateDetails.class)\n  @ApiImplicitParams(\n      @ApiImplicitParam(\n          name = \"certificate\",\n          value = \"post certificate info\",\n          paramType = \"body\",\n          dataType = \"com.yugabyte.yw.forms.ClientCertParams\",\n          required = true))\n  public Result getClientCert(UUID customerUUID, UUID rootCA) {\n    Form<ClientCertParams> formData = formFactory.getFormDataOrBadRequest(ClientCertParams.class);\n    Customer.getOrBadRequest(customerUUID);\n    long certTimeMillis = formData.get().certStart;\n    long certExpiryMillis = formData.get().certExpiry;\n    Date certStart = certTimeMillis != 0L ? new Date(certTimeMillis) : null;\n    Date certExpiry = certExpiryMillis != 0L ? new Date(certExpiryMillis) : null;\n\n    CertificateDetails result =\n        CertificateHelper.createClientCertificate(\n            rootCA, null, formData.get().username, certStart, certExpiry);\n    auditService().createAuditEntry(ctx(), request(), Json.toJson(formData.data()));\n    return PlatformResults.withData(result);\n  }\n\n  // TODO: cleanup raw json\n  @ApiOperation(value = \"Get a customer's root certificate\", response = Object.class)\n  public Result getRootCert(UUID customerUUID, UUID rootCA) {\n    Customer.getOrBadRequest(customerUUID);\n    CertificateInfo.getOrBadRequest(rootCA, customerUUID);\n\n    String certContents = CertificateHelper.getCertPEMFileContents(rootCA);\n    auditService().createAuditEntry(ctx(), request());\n    ObjectNode result = Json.newObject();\n    result.put(CertificateHelper.ROOT_CERT, certContents);\n    return PlatformResults.withRawData(result);\n  }\n\n  @ApiOperation(\n      value = \"List a customer's certificates\",\n      response = CertificateInfo.class,\n      responseContainer = \"List\",\n      nickname = \"getListOfCertificate\")\n  @ApiResponses(\n      @io.swagger.annotations.ApiResponse(\n          code = 500,\n          message = \"If there was a server or database issue when listing the regions\",\n          response = YBPError.class))\n  public Result list(UUID customerUUID) {\n    List<CertificateInfo> certs = CertificateInfo.getAll(customerUUID);\n    return PlatformResults.withData(certs);\n  }\n\n  @ApiOperation(\n      value = \"Get a certificate's UUID\",\n      response = UUID.class,\n      nickname = \"getCertificate\")\n  public Result get(UUID customerUUID, String label) {\n    CertificateInfo cert = CertificateInfo.getOrBadRequest(label);\n    return PlatformResults.withData(cert.uuid);\n  }\n\n  @ApiOperation(\n      value = \"Delete a certificate\",\n      response = YBPSuccess.class,\n      nickname = \"deleteCertificate\")\n  public Result delete(UUID customerUUID, UUID reqCertUUID) {\n    CertificateInfo.delete(reqCertUUID, customerUUID);\n    auditService().createAuditEntry(ctx(), request());\n    LOG.info(\"Successfully deleted the certificate:\" + reqCertUUID);\n    return YBPSuccess.empty();\n  }\n\n  @ApiOperation(value = \"Update an empty certificate\", response = CertificateInfo.class)\n  public Result updateEmptyCustomCert(UUID customerUUID, UUID rootCA) {\n    Form<CertificateParams> formData = formFactory.getFormDataOrBadRequest(CertificateParams.class);\n    Customer.getOrBadRequest(customerUUID);\n    CertificateInfo certificate = CertificateInfo.getOrBadRequest(rootCA, customerUUID);\n    CertificateParams.CustomCertInfo customCertInfo = formData.get().customCertInfo;\n    certificate.setCustomCertInfo(customCertInfo, rootCA, customerUUID);\n    return PlatformResults.withData(certificate);\n  }\n}\n"
    },
    {
      "file": "managed/src/main/java/com/yugabyte/yw/forms/CertificateParams.java",
      "description": "customCertInfo is the new field that was added to this form class as part of the change we are walking through. https://github.com/yugabyte/yugabyte-db/commit/21a40e1eb813e2fd1e7250d9db7747c19558df03#diff-b1baedba2e9d311d06c14a30c80d13f8914ef60fe25dceeeea10d94394899c91. \r\n\r\nNote the `@Constraints.Required()` validation fields in this forms class. Available built-in constraints can be found [in the source code.](https://github.com/playframework/playframework/blob/2.6.x/web/play-java-forms/src/main/java/play/data/validation/Constraints.java). The new field we added is not marked required, so clients can feel free to omit it entirely (in which case it will be `null`)\r\n\r\nA couple of useful methods in this context : \r\n* `Foo f = Json.fromJson(JsonNode, Foo.class)` converts from JsonNode to a class\r\n* `JsonNode j = Json.toJson(obj)` converts any class to JsonNode",
      "line": 33,
      "contents": "// Copyright (c) Yugabyte, Inc.\n\npackage com.yugabyte.yw.forms;\n\nimport com.yugabyte.yw.models.CertificateInfo;\nimport play.data.validation.Constraints;\n\n/**\n * This class will be used by the API and UI Form Elements to validate constraints for the custom\n * certificate Data.\n */\npublic class CertificateParams {\n  @Constraints.Required() public String label;\n\n  @Constraints.Required() public long certStart;\n\n  @Constraints.Required() public long certExpiry;\n\n  @Constraints.Required() public String certContent;\n\n  public String keyContent;\n\n  public CertificateInfo.Type certType = CertificateInfo.Type.SelfSigned;\n\n  public static class CustomCertInfo {\n    public String nodeCertPath;\n    public String nodeKeyPath;\n    public String rootCertPath;\n    public String clientCertPath;\n    public String clientKeyPath;\n  }\n\n  public CustomCertInfo customCertInfo;\n\n  public static class CustomServerCertData {\n    public String serverCertContent;\n    public String serverKeyContent;\n  }\n\n  public CustomServerCertData customServerCertData;\n}\n"
    },
    {
      "file": "managed/src/main/java/com/yugabyte/yw/controllers/CertificateController.java",
      "description": "Let's follow the API method to the key step - persisting the uploaded certificate in the database.",
      "line": 98,
      "contents": "package com.yugabyte.yw.controllers;\n\nimport com.fasterxml.jackson.databind.node.ObjectNode;\nimport com.google.inject.Inject;\nimport com.yugabyte.yw.common.CertificateDetails;\nimport com.yugabyte.yw.common.CertificateHelper;\nimport com.yugabyte.yw.common.PlatformServiceException;\nimport com.yugabyte.yw.common.config.RuntimeConfigFactory;\nimport com.yugabyte.yw.forms.CertificateParams;\nimport com.yugabyte.yw.forms.ClientCertParams;\nimport com.yugabyte.yw.forms.PlatformResults;\nimport com.yugabyte.yw.forms.PlatformResults.YBPError;\nimport com.yugabyte.yw.forms.PlatformResults.YBPSuccess;\nimport com.yugabyte.yw.models.CertificateInfo;\nimport com.yugabyte.yw.models.Customer;\nimport io.swagger.annotations.Api;\nimport io.swagger.annotations.ApiImplicitParam;\nimport io.swagger.annotations.ApiImplicitParams;\nimport io.swagger.annotations.ApiOperation;\nimport io.swagger.annotations.ApiResponses;\nimport io.swagger.annotations.Authorization;\nimport java.util.Date;\nimport java.util.List;\nimport java.util.UUID;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport play.data.Form;\nimport play.libs.Json;\nimport play.mvc.Result;\n\n@Api(\n    value = \"Certificate Info\",\n    authorizations = @Authorization(AbstractPlatformController.API_KEY_AUTH))\npublic class CertificateController extends AuthenticatedController {\n  public static final Logger LOG = LoggerFactory.getLogger(CertificateController.class);\n  @Inject private RuntimeConfigFactory runtimeConfigFactory;\n\n  @ApiOperation(value = \"Restore a certificate from backup\", response = UUID.class)\n  @ApiImplicitParams(\n      @ApiImplicitParam(\n          name = \"certificate\",\n          value = \"certificate params of the backup to be restored\",\n          paramType = \"body\",\n          dataType = \"com.yugabyte.yw.forms.CertificateParams\",\n          required = true))\n  public Result upload(UUID customerUUID) {\n    Customer.getOrBadRequest(customerUUID);\n    Form<CertificateParams> formData = formFactory.getFormDataOrBadRequest(CertificateParams.class);\n\n    Date certStart = new Date(formData.get().certStart);\n    Date certExpiry = new Date(formData.get().certExpiry);\n    String label = formData.get().label;\n    CertificateInfo.Type certType = formData.get().certType;\n    String certContent = formData.get().certContent;\n    String keyContent = formData.get().keyContent;\n    CertificateParams.CustomCertInfo customCertInfo = formData.get().customCertInfo;\n    CertificateParams.CustomServerCertData customServerCertData =\n        formData.get().customServerCertData;\n    switch (certType) {\n      case SelfSigned:\n        {\n          if (certContent == null || keyContent == null) {\n            throw new PlatformServiceException(\n                BAD_REQUEST, \"Certificate or Keyfile can't be null.\");\n          }\n          break;\n        }\n      case CustomCertHostPath:\n        {\n          if (customCertInfo == null) {\n            throw new PlatformServiceException(BAD_REQUEST, \"Custom Cert Info must be provided.\");\n          } else if (customCertInfo.nodeCertPath == null\n              || customCertInfo.nodeKeyPath == null\n              || customCertInfo.rootCertPath == null) {\n            throw new PlatformServiceException(BAD_REQUEST, \"Custom Cert Paths can't be empty.\");\n          }\n          break;\n        }\n      case CustomServerCert:\n        {\n          if (customServerCertData == null) {\n            throw new PlatformServiceException(\n                BAD_REQUEST, \"Custom Server Cert Info must be provided.\");\n          } else if (customServerCertData.serverCertContent == null\n              || customServerCertData.serverKeyContent == null) {\n            throw new PlatformServiceException(\n                BAD_REQUEST, \"Custom Server Cert and Key content can't be empty.\");\n          }\n          break;\n        }\n      default:\n        {\n          throw new PlatformServiceException(BAD_REQUEST, \"certType should be valid.\");\n        }\n    }\n    LOG.info(\"CertificateController: upload cert label {}, type {}\", label, certType);\n    UUID certUUID =\n        CertificateHelper.uploadRootCA(\n            label,\n            customerUUID,\n            runtimeConfigFactory.staticApplicationConf().getString(\"yb.storage.path\"),\n            certContent,\n            keyContent,\n            certStart,\n            certExpiry,\n            certType,\n            customCertInfo,\n            customServerCertData);\n    auditService().createAuditEntry(ctx(), request(), Json.toJson(formData.data()));\n    return PlatformResults.withData(certUUID);\n  }\n\n  @ApiOperation(value = \"Add a client certificate\", response = CertificateDetails.class)\n  @ApiImplicitParams(\n      @ApiImplicitParam(\n          name = \"certificate\",\n          value = \"post certificate info\",\n          paramType = \"body\",\n          dataType = \"com.yugabyte.yw.forms.ClientCertParams\",\n          required = true))\n  public Result getClientCert(UUID customerUUID, UUID rootCA) {\n    Form<ClientCertParams> formData = formFactory.getFormDataOrBadRequest(ClientCertParams.class);\n    Customer.getOrBadRequest(customerUUID);\n    long certTimeMillis = formData.get().certStart;\n    long certExpiryMillis = formData.get().certExpiry;\n    Date certStart = certTimeMillis != 0L ? new Date(certTimeMillis) : null;\n    Date certExpiry = certExpiryMillis != 0L ? new Date(certExpiryMillis) : null;\n\n    CertificateDetails result =\n        CertificateHelper.createClientCertificate(\n            rootCA, null, formData.get().username, certStart, certExpiry);\n    auditService().createAuditEntry(ctx(), request(), Json.toJson(formData.data()));\n    return PlatformResults.withData(result);\n  }\n\n  // TODO: cleanup raw json\n  @ApiOperation(value = \"Get a customer's root certificate\", response = Object.class)\n  public Result getRootCert(UUID customerUUID, UUID rootCA) {\n    Customer.getOrBadRequest(customerUUID);\n    CertificateInfo.getOrBadRequest(rootCA, customerUUID);\n\n    String certContents = CertificateHelper.getCertPEMFileContents(rootCA);\n    auditService().createAuditEntry(ctx(), request());\n    ObjectNode result = Json.newObject();\n    result.put(CertificateHelper.ROOT_CERT, certContents);\n    return PlatformResults.withRawData(result);\n  }\n\n  @ApiOperation(\n      value = \"List a customer's certificates\",\n      response = CertificateInfo.class,\n      responseContainer = \"List\",\n      nickname = \"getListOfCertificate\")\n  @ApiResponses(\n      @io.swagger.annotations.ApiResponse(\n          code = 500,\n          message = \"If there was a server or database issue when listing the regions\",\n          response = YBPError.class))\n  public Result list(UUID customerUUID) {\n    List<CertificateInfo> certs = CertificateInfo.getAll(customerUUID);\n    return PlatformResults.withData(certs);\n  }\n\n  @ApiOperation(\n      value = \"Get a certificate's UUID\",\n      response = UUID.class,\n      nickname = \"getCertificate\")\n  public Result get(UUID customerUUID, String label) {\n    CertificateInfo cert = CertificateInfo.getOrBadRequest(label);\n    return PlatformResults.withData(cert.uuid);\n  }\n\n  @ApiOperation(\n      value = \"Delete a certificate\",\n      response = YBPSuccess.class,\n      nickname = \"deleteCertificate\")\n  public Result delete(UUID customerUUID, UUID reqCertUUID) {\n    CertificateInfo.delete(reqCertUUID, customerUUID);\n    auditService().createAuditEntry(ctx(), request());\n    LOG.info(\"Successfully deleted the certificate:\" + reqCertUUID);\n    return YBPSuccess.empty();\n  }\n\n  @ApiOperation(value = \"Update an empty certificate\", response = CertificateInfo.class)\n  public Result updateEmptyCustomCert(UUID customerUUID, UUID rootCA) {\n    Form<CertificateParams> formData = formFactory.getFormDataOrBadRequest(CertificateParams.class);\n    Customer.getOrBadRequest(customerUUID);\n    CertificateInfo certificate = CertificateInfo.getOrBadRequest(rootCA, customerUUID);\n    CertificateParams.CustomCertInfo customCertInfo = formData.get().customCertInfo;\n    certificate.setCustomCertInfo(customCertInfo, rootCA, customerUUID);\n    return PlatformResults.withData(certificate);\n  }\n}\n"
    },
    {
      "file": "managed/src/main/java/com/yugabyte/yw/common/CertificateHelper.java",
      "description": "CertificateInfo is the \"model\" object used to mirror the SQL table certificate_info in the postgres db. The ORM used here is [ebean](https://www.baeldung.com/ebean-orm#entities). \r\n\r\nThe actual SQL for the certificate_info table is defined separately. Typically, there is an initial definition for the table and in new versions of the software, changes are made to this definition as new columns/indices etc are added/removed. We use [flyway migrations](https://flywaydb.org/documentation/concepts/migrations#sql-based-migrations) and the corresponding sequence of migrations to the initial table are in `managed/src/main/resources/db/migration/default/`.",
      "line": 421,
      "selection": {
        "start": {
          "line": 338,
          "character": 22
        },
        "end": {
          "line": 338,
          "character": 28
        }
      },
      "contents": "// Copyright (c) YugaByte, Inc.\n\npackage com.yugabyte.yw.common;\n\nimport static play.mvc.Http.Status.BAD_REQUEST;\nimport static play.mvc.Http.Status.INTERNAL_SERVER_ERROR;\n\nimport com.yugabyte.yw.commissioner.tasks.subtasks.AnsibleConfigureServers;\nimport com.yugabyte.yw.commissioner.tasks.subtasks.UniverseSetTlsParams;\nimport com.yugabyte.yw.forms.CertificateParams;\nimport com.yugabyte.yw.forms.TlsToggleParams;\nimport com.yugabyte.yw.forms.UniverseDefinitionTaskParams;\nimport com.yugabyte.yw.forms.UniverseDefinitionTaskParams.UserIntent;\nimport com.yugabyte.yw.models.CertificateInfo;\nimport java.io.ByteArrayInputStream;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.StringReader;\nimport java.io.StringWriter;\nimport java.math.BigInteger;\nimport java.security.InvalidKeyException;\nimport java.security.KeyFactory;\nimport java.security.KeyPair;\nimport java.security.KeyPairGenerator;\nimport java.security.NoSuchAlgorithmException;\nimport java.security.NoSuchProviderException;\nimport java.security.PrivateKey;\nimport java.security.Security;\nimport java.security.SignatureException;\nimport java.security.cert.CertificateException;\nimport java.security.cert.CertificateFactory;\nimport java.security.cert.X509Certificate;\nimport java.security.interfaces.RSAPrivateKey;\nimport java.security.interfaces.RSAPublicKey;\nimport java.security.spec.PKCS8EncodedKeySpec;\nimport java.util.ArrayList;\nimport java.util.Base64;\nimport java.util.Calendar;\nimport java.util.Collections;\nimport java.util.Date;\nimport java.util.List;\nimport java.util.UUID;\nimport org.apache.commons.validator.routines.InetAddressValidator;\nimport org.bouncycastle.asn1.DERSequence;\nimport org.bouncycastle.asn1.x500.RDN;\nimport org.bouncycastle.asn1.x500.X500Name;\nimport org.bouncycastle.asn1.x500.X500NameBuilder;\nimport org.bouncycastle.asn1.x500.style.BCStyle;\nimport org.bouncycastle.asn1.x509.BasicConstraints;\nimport org.bouncycastle.asn1.x509.Extension;\nimport org.bouncycastle.asn1.x509.GeneralName;\nimport org.bouncycastle.asn1.x509.GeneralNames;\nimport org.bouncycastle.asn1.x509.KeyUsage;\nimport org.bouncycastle.cert.X509CertificateHolder;\nimport org.bouncycastle.cert.X509v3CertificateBuilder;\nimport org.bouncycastle.cert.jcajce.JcaX509CertificateConverter;\nimport org.bouncycastle.cert.jcajce.JcaX509CertificateHolder;\nimport org.bouncycastle.cert.jcajce.JcaX509ExtensionUtils;\nimport org.bouncycastle.cert.jcajce.JcaX509v3CertificateBuilder;\nimport org.bouncycastle.jce.provider.BouncyCastleProvider;\nimport org.bouncycastle.openssl.jcajce.JcaPEMWriter;\nimport org.bouncycastle.operator.ContentSigner;\nimport org.bouncycastle.operator.OperatorCreationException;\nimport org.bouncycastle.operator.jcajce.JcaContentSignerBuilder;\nimport org.bouncycastle.pkcs.PKCS10CertificationRequest;\nimport org.bouncycastle.pkcs.PKCS10CertificationRequestBuilder;\nimport org.bouncycastle.pkcs.jcajce.JcaPKCS10CertificationRequestBuilder;\nimport org.bouncycastle.util.io.pem.PemObject;\nimport org.bouncycastle.util.io.pem.PemReader;\nimport org.flywaydb.play.FileUtils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport play.libs.Json;\n\n/** Helper class for Certificates */\npublic class CertificateHelper {\n\n  public static final Logger LOG = LoggerFactory.getLogger(CertificateHelper.class);\n\n  public static final String CLIENT_CERT = \"yugabytedb.crt\";\n  public static final String CLIENT_KEY = \"yugabytedb.key\";\n  public static final String DEFAULT_CLIENT = \"yugabyte\";\n  public static final String CERT_PATH = \"%s/certs/%s/%s\";\n  public static final String ROOT_CERT = \"root.crt\";\n  public static final String SERVER_CERT = \"server.crt\";\n  public static final String SERVER_KEY = \"server.key.pem\";\n  public static final String CLIENT_NODE_SUFFIX = \"-client\";\n\n  public static UUID createRootCA(String nodePrefix, UUID customerUUID, String storagePath) {\n    try {\n      KeyPair keyPair = getKeyPairObject();\n\n      UUID rootCA_UUID = UUID.randomUUID();\n      Calendar cal = Calendar.getInstance();\n      Date certStart = cal.getTime();\n      cal.add(Calendar.YEAR, 4);\n      Date certExpiry = cal.getTime();\n      X500Name subject =\n          new X500NameBuilder(BCStyle.INSTANCE)\n              .addRDN(BCStyle.CN, nodePrefix)\n              .addRDN(BCStyle.O, \"example.com\")\n              .build();\n      BigInteger serial = BigInteger.valueOf(System.currentTimeMillis());\n      X509v3CertificateBuilder certGen =\n          new JcaX509v3CertificateBuilder(\n              subject, serial, certStart, certExpiry, subject, keyPair.getPublic());\n      BasicConstraints basicConstraints = new BasicConstraints(1);\n      KeyUsage keyUsage =\n          new KeyUsage(\n              KeyUsage.digitalSignature\n                  | KeyUsage.nonRepudiation\n                  | KeyUsage.keyEncipherment\n                  | KeyUsage.keyCertSign);\n      certGen.addExtension(Extension.basicConstraints, true, basicConstraints.toASN1Primitive());\n      certGen.addExtension(Extension.keyUsage, true, keyUsage.toASN1Primitive());\n      ContentSigner signer =\n          new JcaContentSignerBuilder(\"SHA256withRSA\").build(keyPair.getPrivate());\n      X509CertificateHolder holder = certGen.build(signer);\n      JcaX509CertificateConverter converter = new JcaX509CertificateConverter();\n      converter.setProvider(new BouncyCastleProvider());\n      X509Certificate x509 = converter.getCertificate(holder);\n      String certPath =\n          String.format(\n              CERT_PATH + \"/ca.%s\",\n              storagePath,\n              customerUUID.toString(),\n              rootCA_UUID.toString(),\n              ROOT_CERT);\n      writeCertFileContentToCertPath(Collections.singletonList(x509), certPath);\n      String keyPath =\n          String.format(\n              CERT_PATH + \"/ca.key.pem\",\n              storagePath,\n              customerUUID.toString(),\n              rootCA_UUID.toString());\n      writeKeyFileContentToKeyPath(keyPair.getPrivate(), keyPath);\n      CertificateInfo.Type certType = CertificateInfo.Type.SelfSigned;\n      LOG.info(\n          \"Generated self signed cert label {} uuid {} of type {} for customer {} at paths {}, {}\",\n          nodePrefix,\n          rootCA_UUID,\n          certType,\n          customerUUID,\n          certPath,\n          keyPath);\n\n      CertificateInfo cert =\n          CertificateInfo.create(\n              rootCA_UUID,\n              customerUUID,\n              nodePrefix,\n              certStart,\n              certExpiry,\n              keyPath,\n              certPath,\n              certType);\n\n      LOG.info(\"Created Root CA for universe {}.\", nodePrefix);\n      return cert.uuid;\n    } catch (NoSuchAlgorithmException\n        | IOException\n        | OperatorCreationException\n        | CertificateException e) {\n      LOG.error(\"Unable to create RootCA for universe {}\", nodePrefix, e);\n      return null;\n    }\n  }\n\n  public static UUID createClientRootCA(String nodePrefix, UUID customerUUID, String storagePath) {\n    return createRootCA(nodePrefix + CLIENT_NODE_SUFFIX, customerUUID, storagePath);\n  }\n\n  public static CertificateDetails createSignedCertificate(\n      UUID rootCA,\n      String storagePath,\n      String username,\n      Date certStart,\n      Date certExpiry,\n      String certFileName,\n      String certKeyName) {\n    LOG.info(\n        \"Creating signed certificate signed by root CA {} and user {} at path {}\",\n        rootCA,\n        username,\n        storagePath);\n    try {\n      // Add the security provider in case createSignedCertificate was never called.\n      KeyPair clientKeyPair = getKeyPairObject();\n\n      Calendar cal = Calendar.getInstance();\n      if (certStart == null) {\n        certStart = cal.getTime();\n      }\n      if (certExpiry == null) {\n        cal.add(Calendar.YEAR, 4);\n        certExpiry = cal.getTime();\n      }\n\n      CertificateInfo cert = CertificateInfo.get(rootCA);\n      if (cert.privateKey == null) {\n        throw new PlatformServiceException(BAD_REQUEST, \"Keyfile cannot be null!\");\n      }\n      // The first entry will be the certificate that needs to sign the necessary certificate.\n      X509Certificate cer =\n          getX509CertificateCertObject(FileUtils.readFileToString(new File(cert.certificate)))\n              .get(0);\n      X500Name subject = new JcaX509CertificateHolder(cer).getSubject();\n      PrivateKey pk = null;\n      try {\n        pk = getPrivateKey(FileUtils.readFileToString(new File(cert.privateKey)));\n      } catch (Exception e) {\n        LOG.error(\n            \"Unable to create client CA for username {} using root CA {}\", username, rootCA, e);\n        throw new PlatformServiceException(BAD_REQUEST, \"Could not create client cert.\");\n      }\n\n      X500Name clientCertSubject = new X500Name(String.format(\"CN=%s\", username));\n      BigInteger clientSerial = BigInteger.valueOf(System.currentTimeMillis());\n      PKCS10CertificationRequestBuilder p10Builder =\n          new JcaPKCS10CertificationRequestBuilder(clientCertSubject, clientKeyPair.getPublic());\n      ContentSigner csrContentSigner = new JcaContentSignerBuilder(\"SHA256withRSA\").build(pk);\n      PKCS10CertificationRequest csr = p10Builder.build(csrContentSigner);\n\n      KeyUsage keyUsage =\n          new KeyUsage(\n              KeyUsage.digitalSignature\n                  | KeyUsage.nonRepudiation\n                  | KeyUsage.keyEncipherment\n                  | KeyUsage.keyCertSign);\n\n      X509v3CertificateBuilder clientCertBuilder =\n          new X509v3CertificateBuilder(\n              subject,\n              clientSerial,\n              certStart,\n              certExpiry,\n              csr.getSubject(),\n              csr.getSubjectPublicKeyInfo());\n      JcaX509ExtensionUtils clientCertExtUtils = new JcaX509ExtensionUtils();\n      clientCertBuilder.addExtension(\n          Extension.basicConstraints, true, new BasicConstraints(false).toASN1Primitive());\n      clientCertBuilder.addExtension(\n          Extension.authorityKeyIdentifier,\n          false,\n          clientCertExtUtils.createAuthorityKeyIdentifier(cer));\n      clientCertBuilder.addExtension(\n          Extension.subjectKeyIdentifier,\n          false,\n          clientCertExtUtils.createSubjectKeyIdentifier(csr.getSubjectPublicKeyInfo()));\n      clientCertBuilder.addExtension(Extension.keyUsage, false, keyUsage.toASN1Primitive());\n\n      InetAddressValidator ipAddressValidator = InetAddressValidator.getInstance();\n      if (ipAddressValidator.isValid(username)) {\n        List<GeneralName> altNames = new ArrayList<>();\n        altNames.add(new GeneralName(GeneralName.iPAddress, username));\n        GeneralNames subjectAltNames =\n            GeneralNames.getInstance(new DERSequence(altNames.toArray(new GeneralName[] {})));\n        clientCertBuilder.addExtension(Extension.subjectAlternativeName, false, subjectAltNames);\n      }\n\n      X509CertificateHolder clientCertHolder = clientCertBuilder.build(csrContentSigner);\n      X509Certificate clientCert =\n          new JcaX509CertificateConverter()\n              .setProvider(new BouncyCastleProvider())\n              .getCertificate(clientCertHolder);\n\n      clientCert.verify(cer.getPublicKey(), \"BC\");\n\n      JcaPEMWriter clientCertWriter = null;\n      JcaPEMWriter clientKeyWriter = null;\n      StringWriter certWriter = new StringWriter();\n      StringWriter keyWriter = new StringWriter();\n      CertificateDetails certificateDetails = new CertificateDetails();\n      try {\n        if (storagePath != null) {\n          String clientCertPath = String.format(\"%s/%s\", storagePath, certFileName);\n          String clientKeyPath = String.format(\"%s/%s\", storagePath, certKeyName);\n          File clientCertfile = new File(clientCertPath);\n          File clientKeyfile = new File(clientKeyPath);\n          clientCertWriter = new JcaPEMWriter(new FileWriter(clientCertfile));\n          clientKeyWriter = new JcaPEMWriter(new FileWriter(clientKeyfile));\n        } else {\n          clientCertWriter = new JcaPEMWriter(certWriter);\n          clientKeyWriter = new JcaPEMWriter(keyWriter);\n        }\n        clientCertWriter.writeObject(clientCert);\n        clientCertWriter.flush();\n        clientKeyWriter.writeObject(clientKeyPair.getPrivate());\n        clientKeyWriter.flush();\n      } finally {\n        if (clientCertWriter != null) {\n          clientCertWriter.close();\n        }\n        if (clientKeyWriter != null) {\n          clientKeyWriter.close();\n        }\n      }\n      if (storagePath == null) {\n        certificateDetails.crt = certWriter.toString();\n        certificateDetails.key = keyWriter.toString();\n      }\n      LOG.info(\"Created Client CA for username {} signed by root CA {}.\", username, rootCA);\n      return certificateDetails;\n\n    } catch (NoSuchAlgorithmException\n        | IOException\n        | OperatorCreationException\n        | CertificateException\n        | InvalidKeyException\n        | NoSuchProviderException\n        | SignatureException e) {\n      LOG.error(\"Unable to create client CA for username {} using root CA {}\", username, rootCA, e);\n      throw new PlatformServiceException(INTERNAL_SERVER_ERROR, \"Could not create client cert.\");\n    }\n  }\n\n  public static CertificateDetails createClientCertificate(\n      UUID rootCA, String storagePath, String username, Date certStart, Date certExpiry) {\n    return createSignedCertificate(\n        rootCA, storagePath, username, certStart, certExpiry, CLIENT_CERT, CLIENT_KEY);\n  }\n\n  public static CertificateDetails createServerCertificate(\n      UUID rootCA,\n      String storagePath,\n      String username,\n      Date certStart,\n      Date certExpiry,\n      String certFileName,\n      String certKeyName) {\n    return createSignedCertificate(\n        rootCA, storagePath, username, certStart, certExpiry, certFileName, certKeyName);\n  }\n\n  public static UUID uploadRootCA(\n      String label,\n      UUID customerUUID,\n      String storagePath,\n      String certContent,\n      String keyContent,\n      Date certStart,\n      Date certExpiry,\n      CertificateInfo.Type certType,\n      CertificateParams.CustomCertInfo customCertInfo,\n      CertificateParams.CustomServerCertData customServerCertData) {\n    LOG.debug(\"uploadRootCA: Label: {}, customerUUID: {}\", label, customerUUID.toString());\n    try {\n      if (certContent == null) {\n        throw new PlatformServiceException(BAD_REQUEST, \"Certfile can't be null\");\n      }\n      UUID rootCA_UUID = UUID.randomUUID();\n      String keyPath = null;\n      CertificateInfo.CustomServerCertInfo customServerCertInfo = null;\n      List<X509Certificate> x509CACerts = getX509CertificateCertObject(certContent);\n      // Verify the uploaded cert is a verified cert chain.\n      verifyCertValidity(x509CACerts);\n      if (certType == CertificateInfo.Type.SelfSigned) {\n        // The first entry in the file should be the cert we want to use for generating server\n        // certs.\n        verifyCertSignatureAndOrder(x509CACerts, keyContent);\n        keyPath =\n            String.format(\n                \"%s/certs/%s/%s/ca.key.pem\",\n                storagePath, customerUUID.toString(), rootCA_UUID.toString());\n      }\n      if (certType == CertificateInfo.Type.CustomServerCert) {\n        // Verify the upload Server Cert is a verified cert chain.\n        List<X509Certificate> x509ServerCertificates =\n            getX509CertificateCertObject(customServerCertData.serverCertContent);\n        // Verify that the uploaded server cert was signed by the uploaded CA cert\n        List<X509Certificate> combinedArrayList = new ArrayList<>(x509ServerCertificates);\n        combinedArrayList.addAll(x509CACerts);\n        verifyCertValidity(combinedArrayList);\n        // The first entry in the file should be the cert we want to use for generating server\n        // certs.\n        verifyCertSignatureAndOrder(x509ServerCertificates, customServerCertData.serverKeyContent);\n        String serverCertPath =\n            String.format(\n                \"%s/certs/%s/%s/%s\",\n                storagePath, customerUUID.toString(), rootCA_UUID.toString(), SERVER_CERT);\n        String serverKeyPath =\n            String.format(\n                \"%s/certs/%s/%s/%s\",\n                storagePath, customerUUID.toString(), rootCA_UUID.toString(), SERVER_KEY);\n        writeCertFileContentToCertPath(x509ServerCertificates, serverCertPath);\n        writeKeyFileContentToKeyPath(\n            getPrivateKey(customServerCertData.serverKeyContent), serverKeyPath);\n        customServerCertInfo =\n            new CertificateInfo.CustomServerCertInfo(serverCertPath, serverKeyPath);\n      }\n      String certPath =\n          String.format(\n              \"%s/certs/%s/%s/ca.%s\",\n              storagePath, customerUUID.toString(), rootCA_UUID.toString(), ROOT_CERT);\n\n      writeCertFileContentToCertPath(getX509CertificateCertObject(certContent), certPath);\n\n      CertificateInfo cert;\n      switch (certType) {\n        case SelfSigned:\n          {\n            writeKeyFileContentToKeyPath(getPrivateKey(keyContent), keyPath);\n            cert =\n                CertificateInfo.create(\n                    rootCA_UUID,\n                    customerUUID,\n                    label,\n                    certStart,\n                    certExpiry,\n                    keyPath,\n                    certPath,\n                    certType);\n            break;\n          }\n        case CustomCertHostPath:\n          {\n            cert =\n                CertificateInfo.create(\n                    rootCA_UUID,\n                    customerUUID,\n                    label,\n                    certStart,\n                    certExpiry,\n                    certPath,\n                    customCertInfo);\n            break;\n          }\n        case CustomServerCert:\n          {\n            cert =\n                CertificateInfo.create(\n                    rootCA_UUID,\n                    customerUUID,\n                    label,\n                    certStart,\n                    certExpiry,\n                    certPath,\n                    customServerCertInfo);\n            break;\n          }\n        default:\n          {\n            throw new PlatformServiceException(BAD_REQUEST, \"certType should be valid.\");\n          }\n      }\n      LOG.info(\n          \"Uploaded cert label {} (uuid {}) of type {} at paths\"\n              + \" '{}', '{}' with custom cert info {}\",\n          label,\n          rootCA_UUID,\n          certType,\n          certPath,\n          String.valueOf(keyPath),\n          Json.toJson(customCertInfo));\n      return cert.uuid;\n    } catch (IOException | NoSuchAlgorithmException e) {\n      LOG.error(\n          \"uploadRootCA: Could not generate checksum for cert {} for customer {}\",\n          label,\n          customerUUID.toString());\n      throw new PlatformServiceException(\n          INTERNAL_SERVER_ERROR, \"uploadRootCA: Checksum generation failed.\");\n    }\n  }\n\n  public static String getCertPEMFileContents(UUID rootCA) {\n    CertificateInfo cert = CertificateInfo.get(rootCA);\n    String certPEM = FileUtils.readFileToString(new File(cert.certificate));\n    return certPEM;\n  }\n\n  public static String getCertPEM(UUID rootCA) {\n    String certPEM = getCertPEMFileContents(rootCA);\n    certPEM = Base64.getEncoder().encodeToString(certPEM.getBytes());\n    return certPEM;\n  }\n\n  public static String getCertPEM(CertificateInfo cert) {\n    String certPEM = FileUtils.readFileToString(new File(cert.certificate));\n    certPEM = Base64.getEncoder().encodeToString(certPEM.getBytes());\n    return certPEM;\n  }\n\n  public static String getKeyPEM(CertificateInfo cert) {\n    String privateKeyPEM = FileUtils.readFileToString(new File(cert.privateKey));\n    privateKeyPEM = Base64.getEncoder().encodeToString(privateKeyPEM.getBytes());\n    return privateKeyPEM;\n  }\n\n  public static String getKeyPEM(UUID rootCA) {\n    CertificateInfo cert = CertificateInfo.get(rootCA);\n    String privateKeyPEM = FileUtils.readFileToString(new File(cert.privateKey));\n    privateKeyPEM = Base64.getEncoder().encodeToString(privateKeyPEM.getBytes());\n    return privateKeyPEM;\n  }\n\n  public static String getClientCertFile(UUID rootCA) {\n    CertificateInfo cert = CertificateInfo.get(rootCA);\n    File certFile = new File(cert.certificate);\n    String path = certFile.getParentFile().toString();\n    return String.format(\"%s/%s\", path, CLIENT_CERT);\n  }\n\n  public static String getClientKeyFile(UUID rootCA) {\n    CertificateInfo cert = CertificateInfo.get(rootCA);\n    File certFile = new File(cert.certificate);\n    String path = certFile.getParentFile().toString();\n    return String.format(\"%s/%s\", path, CLIENT_KEY);\n  }\n\n  public static boolean areCertsDiff(UUID cert1, UUID cert2) {\n    try {\n      CertificateInfo cer1 = CertificateInfo.get(cert1);\n      CertificateInfo cer2 = CertificateInfo.get(cert2);\n      FileInputStream is1 = new FileInputStream(new File(cer1.certificate));\n      FileInputStream is2 = new FileInputStream(new File(cer2.certificate));\n      CertificateFactory fact = CertificateFactory.getInstance(\"X.509\");\n      X509Certificate certObj1 = (X509Certificate) fact.generateCertificate(is1);\n      X509Certificate certObj2 = (X509Certificate) fact.generateCertificate(is2);\n      return !certObj2.equals(certObj1);\n    } catch (IOException | CertificateException e) {\n      LOG.error(\"Unable to read certs {}: {}\", cert1.toString(), cert2.toString());\n      throw new RuntimeException(\"Could not read certs to compare. \" + e);\n    }\n  }\n\n  public static boolean arePathsSame(UUID cert1, UUID cert2) {\n    CertificateInfo cer1 = CertificateInfo.get(cert1);\n    CertificateInfo cer2 = CertificateInfo.get(cert2);\n    return (cer1.getCustomCertInfo().nodeCertPath.equals(cer2.getCustomCertInfo().nodeCertPath)\n        || cer1.getCustomCertInfo().nodeKeyPath.equals(cer2.getCustomCertInfo().nodeKeyPath));\n  }\n\n  public static void createChecksums() {\n    List<CertificateInfo> certs = CertificateInfo.getAllNoChecksum();\n    for (CertificateInfo cert : certs) {\n      try {\n        cert.setChecksum();\n      } catch (IOException | NoSuchAlgorithmException e) {\n        // Log error, but don't cause it to error out.\n        LOG.error(\"Could not generate checksum for cert: {}\", cert.certificate);\n      }\n    }\n  }\n\n  @SuppressWarnings(\"unchecked\")\n  public static List<X509Certificate> getX509CertificateCertObject(String certContent) {\n    try {\n      InputStream in = null;\n      byte[] certEntryBytes = certContent.getBytes();\n      in = new ByteArrayInputStream(certEntryBytes);\n      CertificateFactory certFactory = CertificateFactory.getInstance(\"X.509\");\n      return (List<X509Certificate>) (List<?>) certFactory.generateCertificates(in);\n    } catch (CertificateException e) {\n      LOG.error(e.getMessage());\n      throw new RuntimeException(\"Unable to get cert Object\");\n    }\n  }\n\n  public static PrivateKey getPrivateKey(String keyContent) {\n    try (PemReader pemReader = new PemReader(new StringReader(new String(keyContent)))) {\n      PemObject pemObject = pemReader.readPemObject();\n      byte[] bytes = pemObject.getContent();\n      PKCS8EncodedKeySpec spec = new PKCS8EncodedKeySpec(bytes);\n      KeyFactory kf = KeyFactory.getInstance(\"RSA\");\n      return kf.generatePrivate(spec);\n    } catch (Exception e) {\n      LOG.error(e.getMessage());\n      throw new RuntimeException(\"Unable to get Private Key\");\n    }\n  }\n\n  public static boolean isRootCARequired(UniverseDefinitionTaskParams taskParams) {\n    UserIntent userIntent = taskParams.getPrimaryCluster().userIntent;\n    return isRootCARequired(\n        userIntent.enableNodeToNodeEncrypt,\n        userIntent.enableClientToNodeEncrypt,\n        taskParams.rootAndClientRootCASame);\n  }\n\n  public static boolean isRootCARequired(AnsibleConfigureServers.Params taskParams) {\n    return isRootCARequired(\n        taskParams.enableNodeToNodeEncrypt,\n        taskParams.enableClientToNodeEncrypt,\n        taskParams.rootAndClientRootCASame);\n  }\n\n  public static boolean isRootCARequired(UniverseSetTlsParams.Params taskParams) {\n    return isRootCARequired(\n        taskParams.enableNodeToNodeEncrypt,\n        taskParams.enableClientToNodeEncrypt,\n        taskParams.rootAndClientRootCASame);\n  }\n\n  public static boolean isRootCARequired(TlsToggleParams taskParams) {\n    return isRootCARequired(\n        taskParams.enableNodeToNodeEncrypt,\n        taskParams.enableClientToNodeEncrypt,\n        taskParams.rootAndClientRootCASame);\n  }\n\n  public static boolean isRootCARequired(\n      boolean enableNodeToNodeEncrypt,\n      boolean enableClientToNodeEncrypt,\n      boolean rootAndClientRootCASame) {\n    return enableNodeToNodeEncrypt || (rootAndClientRootCASame && enableClientToNodeEncrypt);\n  }\n\n  public static boolean isClientRootCARequired(UniverseDefinitionTaskParams taskParams) {\n    UserIntent userIntent = taskParams.getPrimaryCluster().userIntent;\n    return isClientRootCARequired(\n        userIntent.enableNodeToNodeEncrypt,\n        userIntent.enableClientToNodeEncrypt,\n        taskParams.rootAndClientRootCASame);\n  }\n\n  public static boolean isClientRootCARequired(AnsibleConfigureServers.Params taskParams) {\n    return isClientRootCARequired(\n        taskParams.enableNodeToNodeEncrypt,\n        taskParams.enableClientToNodeEncrypt,\n        taskParams.rootAndClientRootCASame);\n  }\n\n  public static boolean isClientRootCARequired(UniverseSetTlsParams.Params taskParams) {\n    return isClientRootCARequired(\n        taskParams.enableNodeToNodeEncrypt,\n        taskParams.enableClientToNodeEncrypt,\n        taskParams.rootAndClientRootCASame);\n  }\n\n  public static boolean isClientRootCARequired(TlsToggleParams taskParams) {\n    return isClientRootCARequired(\n        taskParams.enableNodeToNodeEncrypt,\n        taskParams.enableClientToNodeEncrypt,\n        taskParams.rootAndClientRootCASame);\n  }\n\n  public static boolean isClientRootCARequired(\n      boolean enableNodeToNodeEncrypt,\n      boolean enableClientToNodeEncrypt,\n      boolean rootAndClientRootCASame) {\n    return !rootAndClientRootCASame && enableClientToNodeEncrypt;\n  }\n\n  public static void writeKeyFileContentToKeyPath(PrivateKey keyContent, String keyPath) {\n    File keyFile = new File(keyPath);\n    try (JcaPEMWriter keyWriter = new JcaPEMWriter(new FileWriter(keyFile))) {\n      keyWriter.writeObject(keyContent);\n      keyWriter.flush();\n    } catch (Exception e) {\n      LOG.error(e.getMessage());\n      throw new RuntimeException(\"Save privateKey failed.\");\n    }\n  }\n\n  public static void writeCertFileContentToCertPath(List<X509Certificate> certs, String certPath) {\n    File certfile = new File(certPath);\n    // Create directory to store the certFile.\n    certfile.getParentFile().mkdirs();\n    try (JcaPEMWriter certWriter = new JcaPEMWriter(new FileWriter(certfile))) {\n      for (X509Certificate cert : certs) {\n        certWriter.writeObject(cert);\n        certWriter.flush();\n      }\n    } catch (Exception e) {\n      LOG.error(e.getMessage());\n      throw new RuntimeException(\"Save certContent failed.\");\n    }\n  }\n\n  public static KeyPair getKeyPairObject() {\n    try {\n      // Add the security provider in case it was never called.\n      Security.addProvider(new BouncyCastleProvider());\n      KeyPairGenerator keypairGen = KeyPairGenerator.getInstance(\"RSA\");\n      keypairGen.initialize(2048);\n      return keypairGen.generateKeyPair();\n    } catch (Exception e) {\n      LOG.error(e.getMessage());\n    }\n    return null;\n  }\n\n  private static boolean verifySignature(X509Certificate cert, String key) {\n    try {\n      // Add the security provider in case verifySignature was never called.\n      getKeyPairObject();\n      RSAPrivateKey privKey = (RSAPrivateKey) getPrivateKey(key);\n      RSAPublicKey publicKey = (RSAPublicKey) cert.getPublicKey();\n      return privKey.getModulus().toString().equals(publicKey.getModulus().toString());\n    } catch (Exception e) {\n      LOG.error(\"Cert or key is invalid.\" + e.getMessage());\n    }\n    return false;\n  }\n\n  // Verify that each certificate in the root chain has been signed by\n  // another cert present in the uploaded file.\n  private static void verifyCertValidity(List<X509Certificate> certs) {\n    certs\n        .stream()\n        .forEach(\n            cert -> {\n              if (!certs\n                  .stream()\n                  .anyMatch(potentialRootCert -> verifyCertValidity(cert, potentialRootCert))) {\n                X500Name x500Name = new X500Name(cert.getSubjectX500Principal().getName());\n                RDN cn = x500Name.getRDNs(BCStyle.CN)[0];\n                throw new PlatformServiceException(\n                    BAD_REQUEST,\n                    \"Certificate with CN = \"\n                        + cn.getFirst().getValue()\n                        + \" has no associated root\");\n              }\n              verifyCertDateValidity(cert);\n            });\n  }\n\n  // Verify that certificate is currently valid and valid for 1 day\n  private static void verifyCertDateValidity(X509Certificate cert) {\n    Calendar cal = Calendar.getInstance();\n    cal.add(Calendar.DATE, 1);\n    Date oneDayAfterToday = cal.getTime();\n    try {\n      cert.checkValidity();\n      cert.checkValidity(oneDayAfterToday);\n    } catch (Exception e) {\n      X500Name x500Name = new X500Name(cert.getSubjectX500Principal().getName());\n      RDN cn = x500Name.getRDNs(BCStyle.CN)[0];\n      throw new PlatformServiceException(\n          BAD_REQUEST,\n          \"Certificate with CN = \" + cn.getFirst().getValue() + \" has invalid start/end dates.\");\n    }\n  }\n\n  private static boolean verifyCertValidity(\n      X509Certificate cert, X509Certificate potentialRootCert) {\n    try {\n      cert.verify(potentialRootCert.getPublicKey());\n      return true;\n    } catch (Exception exp) {\n      // Exception means the verify failed.\n      return false;\n    }\n  }\n\n  private static boolean verifyCertSignatureAndOrder(\n      List<X509Certificate> x509Certificates, String keyContent) {\n    if (!verifySignature(x509Certificates.get(0), keyContent)) {\n      // If the first certificate is not the right one, maybe the user has entered the\n      // certificates in the wrong order. Check and update the customer with the right\n      // message.\n      x509Certificates\n          .stream()\n          .forEach(\n              x509Certificate -> {\n                if (verifySignature(x509Certificate, keyContent)) {\n                  X500Name x500Name =\n                      new X500Name(x509Certificate.getSubjectX500Principal().getName());\n                  RDN cn = x500Name.getRDNs(BCStyle.CN)[0];\n                  throw new PlatformServiceException(\n                      BAD_REQUEST,\n                      \"Certificate with CN = \"\n                          + cn.getFirst().getValue()\n                          + \"should be the first entry in the file.\");\n                }\n              });\n      throw new PlatformServiceException(BAD_REQUEST, \"Certificate and key don't match.\");\n    }\n    return true;\n  }\n}\n"
    },
    {
      "file": "managed/src/main/resources/db/migration/default/common/V28__Certificates_Table.sql",
      "description": "This was the initial definition of certificate_info table from a while ago.",
      "line": 2,
      "contents": "-- Copyright (c) YugaByte, Inc.\ncreate table certificate_info (\n  uuid                          uuid not null,\n  customer_uuid                 uuid not null,\n  label                         varchar(255),\n  start_date                    timestamp not null,\n  expiry_date                   timestamp not null,\n  private_key                   TEXT not null,\n  certificate                   TEXT not null,\n  constraint pk_cert primary key (uuid)\n);\n"
    },
    {
      "file": "managed/src/main/resources/db/migration/default/common/V54__Alter_Certificate_Info.sql",
      "description": "This is the flyway migration file for the addition of the new `json` column that is required for this change. As you can see, the sequence numbers of the migration files keep increasing and define the order in which migrations are executed by flyway to complete the migration.\r\n\r\nThis is a simple migration but there can be more complex migrations where we may want to remove a column and move all old data in those columns to a new format. This will require code to be executed - flyway offers [Java migrations](https://flywaydb.org/documentation/tutorials/java) to help with this, we have a few examples in our code too.",
      "line": 2,
      "contents": "-- Copyright (c) YugaByte, Inc.\nalter table certificate_info add column custom_cert_info json;\n"
    },
    {
      "file": "managed/src/main/java/com/yugabyte/yw/models/CertificateInfo.java",
      "description": "This is the new field in the ebean model file that mirrors the new SQL column we just added. \r\n\r\nYou can explore ebean annotations in their (sparse) docs at https://ebean.io/docs/mapping/jpa/ which describe the added field (`DbJson` in this case is the type of the field that maps to the postgres JSON type).\r\n\r\nOther useful ebean tools/methods to explore are:\r\n1. [ORM methods to query the db](https://ebean.io/docs/query/)\r\n2. [Expressing foreign key relationships through annotations](https://ebean.io/docs/mapping/jpa/one-to-many)\r\n3. [Wrapping multiple queries and updates in a single db transaction](https://ebean.io/docs/transactions/)\r\n",
      "line": 146,
      "contents": "// Copyright (c) YugaByte, Inc.\n\npackage com.yugabyte.yw.models;\n\nimport static io.swagger.annotations.ApiModelProperty.AccessMode.READ_ONLY;\nimport static io.swagger.annotations.ApiModelProperty.AccessMode.READ_WRITE;\nimport static play.mvc.Http.Status.BAD_REQUEST;\nimport static play.mvc.Http.Status.INTERNAL_SERVER_ERROR;\n\nimport com.fasterxml.jackson.annotation.JsonFormat;\nimport com.fasterxml.jackson.databind.JsonNode;\nimport com.google.common.annotations.VisibleForTesting;\nimport com.yugabyte.yw.common.PlatformServiceException;\nimport com.yugabyte.yw.common.Util;\nimport com.yugabyte.yw.common.Util.UniverseDetailSubset;\nimport com.yugabyte.yw.forms.CertificateParams;\nimport io.ebean.Finder;\nimport io.ebean.Model;\nimport io.ebean.annotation.DbJson;\nimport io.ebean.annotation.EnumValue;\nimport io.swagger.annotations.ApiModel;\nimport io.swagger.annotations.ApiModelProperty;\nimport java.io.IOException;\nimport java.security.NoSuchAlgorithmException;\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.UUID;\nimport java.util.stream.Collectors;\nimport javax.persistence.Column;\nimport javax.persistence.Entity;\nimport javax.persistence.EnumType;\nimport javax.persistence.Enumerated;\nimport javax.persistence.Id;\nimport javax.persistence.Transient;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport play.data.validation.Constraints;\nimport play.libs.Json;\n\n@ApiModel(description = \"SSL certificate used by the universe\")\n@Entity\npublic class CertificateInfo extends Model {\n\n  public enum Type {\n    @EnumValue(\"SelfSigned\")\n    SelfSigned,\n\n    @EnumValue(\"CustomCertHostPath\")\n    CustomCertHostPath,\n\n    @EnumValue(\"CustomServerCert\")\n    CustomServerCert\n  }\n\n  public static class CustomServerCertInfo {\n    public String serverCert;\n    public String serverKey;\n\n    public CustomServerCertInfo() {\n      this.serverCert = null;\n      this.serverKey = null;\n    }\n\n    public CustomServerCertInfo(String serverCert, String serverKey) {\n      this.serverCert = serverCert;\n      this.serverKey = serverKey;\n    }\n  }\n\n  @ApiModelProperty(value = \"Certificate UUID\", accessMode = READ_ONLY)\n  @Constraints.Required\n  @Id\n  @Column(nullable = false, unique = true)\n  public UUID uuid;\n\n  @ApiModelProperty(\n      value = \"Customer UUID of the backup which it belongs to\",\n      accessMode = READ_WRITE)\n  @Constraints.Required\n  @Column(nullable = false)\n  public UUID customerUUID;\n\n  @ApiModelProperty(\n      value = \"Certificate label\",\n      example = \"yb-admin-example\",\n      accessMode = READ_WRITE)\n  @Column(unique = true)\n  public String label;\n\n  @ApiModelProperty(value = \"The certificate's creation date\", accessMode = READ_WRITE)\n  @Constraints.Required\n  @Column(nullable = false)\n  @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = \"yyyy-MM-dd HH:mm:ss\")\n  public Date startDate;\n\n  @ApiModelProperty(value = \"The certificate's expiry date\", accessMode = READ_WRITE)\n  @Constraints.Required\n  @Column(nullable = false)\n  @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = \"yyyy-MM-dd HH:mm:ss\")\n  public Date expiryDate;\n\n  @ApiModelProperty(\n      value = \"Private key path\",\n      example = \"/opt/yugaware/.../example.key.pem\",\n      accessMode = READ_WRITE)\n  @Column(nullable = true)\n  public String privateKey;\n\n  @ApiModelProperty(\n      value = \"Certificate path\",\n      example = \"/opt/yugaware/certs/.../ca.root.cert\",\n      accessMode = READ_WRITE)\n  @Constraints.Required\n  @Column(nullable = false)\n  public String certificate;\n\n  @ApiModelProperty(\n      value = \"Type of the certificate\",\n      example = \"SelfSigned\",\n      allowableValues = \"SelfSigned, CustomCertHostPath, CustomServerCert\",\n      accessMode = READ_WRITE)\n  @Constraints.Required\n  @Column(nullable = false)\n  @Enumerated(EnumType.STRING)\n  public CertificateInfo.Type certType;\n\n  @ApiModelProperty(value = \"The certificate file's checksum\", accessMode = READ_ONLY)\n  @Column(nullable = true)\n  public String checksum;\n\n  public void setChecksum() throws IOException, NoSuchAlgorithmException {\n    if (this.certificate != null) {\n      this.checksum = Util.getFileChecksum(this.certificate);\n      this.save();\n    }\n  }\n\n  @ApiModelProperty(value = \"Details about the certificate\", accessMode = READ_WRITE)\n  @Column(columnDefinition = \"TEXT\", nullable = true)\n  @DbJson\n  public JsonNode customCertInfo;\n\n  public CertificateParams.CustomCertInfo getCustomCertInfo() {\n    if (this.certType != CertificateInfo.Type.CustomCertHostPath) {\n      return null;\n    }\n    if (this.customCertInfo != null) {\n      return Json.fromJson(this.customCertInfo, CertificateParams.CustomCertInfo.class);\n    }\n    return null;\n  }\n\n  public void setCustomCertInfo(\n      CertificateParams.CustomCertInfo certInfo, UUID certUUID, UUID cudtomerUUID) {\n    this.checkEditable(certUUID, customerUUID);\n    this.customCertInfo = Json.toJson(certInfo);\n    this.save();\n  }\n\n  public CustomServerCertInfo getCustomServerCertInfo() {\n    if (this.certType != CertificateInfo.Type.CustomServerCert) {\n      return null;\n    }\n    if (this.customCertInfo != null) {\n      return Json.fromJson(this.customCertInfo, CustomServerCertInfo.class);\n    }\n    return null;\n  }\n\n  public static final Logger LOG = LoggerFactory.getLogger(CertificateInfo.class);\n\n  public static CertificateInfo create(\n      UUID uuid,\n      UUID customerUUID,\n      String label,\n      Date startDate,\n      Date expiryDate,\n      String privateKey,\n      String certificate,\n      CertificateInfo.Type certType)\n      throws IOException, NoSuchAlgorithmException {\n    CertificateInfo cert = new CertificateInfo();\n    cert.uuid = uuid;\n    cert.customerUUID = customerUUID;\n    cert.label = label;\n    cert.startDate = startDate;\n    cert.expiryDate = expiryDate;\n    cert.privateKey = privateKey;\n    cert.certificate = certificate;\n    cert.certType = certType;\n    cert.checksum = Util.getFileChecksum(certificate);\n    cert.save();\n    return cert;\n  }\n\n  public static CertificateInfo create(\n      UUID uuid,\n      UUID customerUUID,\n      String label,\n      Date startDate,\n      Date expiryDate,\n      String certificate,\n      CertificateParams.CustomCertInfo customCertInfo)\n      throws IOException, NoSuchAlgorithmException {\n    CertificateInfo cert = new CertificateInfo();\n    cert.uuid = uuid;\n    cert.customerUUID = customerUUID;\n    cert.label = label;\n    cert.startDate = startDate;\n    cert.expiryDate = expiryDate;\n    cert.certificate = certificate;\n    cert.certType = Type.CustomCertHostPath;\n    cert.customCertInfo = Json.toJson(customCertInfo);\n    cert.checksum = Util.getFileChecksum(certificate);\n    cert.save();\n    return cert;\n  }\n\n  public static CertificateInfo create(\n      UUID uuid,\n      UUID customerUUID,\n      String label,\n      Date startDate,\n      Date expiryDate,\n      String certificate,\n      CustomServerCertInfo customServerCertInfo)\n      throws IOException, NoSuchAlgorithmException {\n    CertificateInfo cert = new CertificateInfo();\n    cert.uuid = uuid;\n    cert.customerUUID = customerUUID;\n    cert.label = label;\n    cert.startDate = startDate;\n    cert.expiryDate = expiryDate;\n    cert.certificate = certificate;\n    cert.certType = Type.CustomServerCert;\n    cert.customCertInfo = Json.toJson(customServerCertInfo);\n    cert.checksum = Util.getFileChecksum(certificate);\n    cert.save();\n    return cert;\n  }\n\n  public static CertificateInfo createCopy(\n      CertificateInfo certificateInfo, String label, String certFilePath)\n      throws IOException, NoSuchAlgorithmException {\n    CertificateInfo copy = new CertificateInfo();\n    copy.uuid = UUID.randomUUID();\n    copy.customerUUID = certificateInfo.customerUUID;\n    copy.label = label;\n    copy.startDate = certificateInfo.startDate;\n    copy.expiryDate = certificateInfo.expiryDate;\n    copy.privateKey = certificateInfo.privateKey;\n    copy.certificate = certFilePath;\n    copy.certType = certificateInfo.certType;\n    copy.checksum = Util.getFileChecksum(certFilePath);\n    copy.customCertInfo = certificateInfo.customCertInfo;\n    copy.save();\n    return copy;\n  }\n\n  public static boolean isTemporary(CertificateInfo certificateInfo) {\n    return certificateInfo.certificate.endsWith(\"ca.multi.root.crt\");\n  }\n\n  private static final Finder<UUID, CertificateInfo> find =\n      new Finder<UUID, CertificateInfo>(CertificateInfo.class) {};\n\n  public static CertificateInfo get(UUID certUUID) {\n    return find.byId(certUUID);\n  }\n\n  public static CertificateInfo getOrBadRequest(UUID certUUID, UUID customerUUID) {\n    CertificateInfo certificateInfo = get(certUUID);\n    if (certificateInfo == null) {\n      throw new PlatformServiceException(BAD_REQUEST, \"Invalid Cert ID: \" + certUUID);\n    }\n    if (!certificateInfo.customerUUID.equals(customerUUID)) {\n      throw new PlatformServiceException(BAD_REQUEST, \"Certificate doesn't belong to customer\");\n    }\n    return certificateInfo;\n  }\n\n  public static CertificateInfo getOrBadRequest(UUID certUUID) {\n    CertificateInfo certificateInfo = get(certUUID);\n    if (certificateInfo == null) {\n      throw new PlatformServiceException(BAD_REQUEST, \"Invalid Cert ID: \" + certUUID);\n    }\n    return certificateInfo;\n  }\n\n  public static CertificateInfo get(String label) {\n    return find.query().where().eq(\"label\", label).findOne();\n  }\n\n  public static CertificateInfo getOrBadRequest(String label) {\n    CertificateInfo certificateInfo = get(label);\n    if (certificateInfo == null) {\n      throw new PlatformServiceException(BAD_REQUEST, \"No Certificate with Label: \" + label);\n    }\n    return certificateInfo;\n  }\n\n  public static List<CertificateInfo> getAllNoChecksum() {\n    List<CertificateInfo> certificateInfoList = find.query().where().isNull(\"checksum\").findList();\n    return certificateInfoList\n        .stream()\n        .filter(certificateInfo -> !CertificateInfo.isTemporary(certificateInfo))\n        .collect(Collectors.toList());\n  }\n\n  public static List<CertificateInfo> getAll(UUID customerUUID) {\n    List<CertificateInfo> certificateInfoList =\n        find.query().where().eq(\"customer_uuid\", customerUUID).findList();\n    certificateInfoList =\n        certificateInfoList\n            .stream()\n            .filter(certificateInfo -> !CertificateInfo.isTemporary(certificateInfo))\n            .collect(Collectors.toList());\n    populateUniverseData(customerUUID, certificateInfoList);\n    return certificateInfoList;\n  }\n\n  public static boolean isCertificateValid(UUID certUUID) {\n    if (certUUID == null) {\n      return true;\n    }\n    CertificateInfo certificate = CertificateInfo.get(certUUID);\n    if (certificate == null) {\n      return false;\n    }\n    if (certificate.certType == CertificateInfo.Type.CustomCertHostPath\n        && certificate.customCertInfo == null) {\n      return false;\n    }\n    return true;\n  }\n\n  @VisibleForTesting @Transient Boolean inUse = null;\n\n  @ApiModelProperty(\n      value =\n          \"Indicates whether the certificate is in use. This value is `true` if the universe contains a reference to the certificate.\",\n      accessMode = READ_ONLY)\n  // Returns if there is an in use reference to the object.\n  public boolean getInUse() {\n    if (inUse == null) {\n      return Universe.existsCertificate(this.uuid, this.customerUUID);\n    } else {\n      return inUse;\n    }\n  }\n\n  public void setInUse(boolean inUse) {\n    this.inUse = inUse;\n  }\n\n  @VisibleForTesting @Transient List<UniverseDetailSubset> universeDetailSubsets = null;\n\n  @ApiModelProperty(\n      value = \"Associated universe details for the certificate\",\n      accessMode = READ_ONLY)\n  public List<UniverseDetailSubset> getUniverseDetails() {\n    if (universeDetailSubsets == null) {\n      Set<Universe> universes = Universe.universeDetailsIfCertsExists(this.uuid, this.customerUUID);\n      return Util.getUniverseDetails(universes);\n    } else {\n      return universeDetailSubsets;\n    }\n  }\n\n  public void setUniverseDetails(List<UniverseDetailSubset> universeDetailSubsets) {\n    this.universeDetailSubsets = universeDetailSubsets;\n  }\n\n  public static void populateUniverseData(\n      UUID customerUUID, List<CertificateInfo> certificateInfoList) {\n    Set<Universe> universes = Customer.get(customerUUID).getUniverses();\n    Set<UUID> certificateInfoSet =\n        certificateInfoList.stream().map(e -> e.uuid).collect(Collectors.toSet());\n\n    Map<UUID, Set<Universe>> certificateUniverseMap = new HashMap<>();\n    universes.forEach(\n        universe -> {\n          UUID rootCA = universe.getUniverseDetails().rootCA;\n          UUID clientRootCA = universe.getUniverseDetails().clientRootCA;\n          if (rootCA != null) {\n            if (certificateInfoSet.contains(rootCA)) {\n              certificateUniverseMap.putIfAbsent(rootCA, new HashSet<>());\n              certificateUniverseMap.get(rootCA).add(universe);\n            } else {\n              LOG.error(\"Universe: {} has unknown rootCA: {}\", universe.universeUUID, rootCA);\n            }\n          }\n          if (clientRootCA != null && !clientRootCA.equals(rootCA)) {\n            if (certificateInfoSet.contains(clientRootCA)) {\n              certificateUniverseMap.putIfAbsent(clientRootCA, new HashSet<>());\n              certificateUniverseMap.get(clientRootCA).add(universe);\n            } else {\n              LOG.error(\"Universe: {} has unknown clientRootCA: {}\", universe.universeUUID, rootCA);\n            }\n          }\n        });\n\n    certificateInfoList.forEach(\n        certificateInfo -> {\n          if (certificateUniverseMap.containsKey(certificateInfo.uuid)) {\n            certificateInfo.setInUse(true);\n            certificateInfo.setUniverseDetails(\n                Util.getUniverseDetails(certificateUniverseMap.get(certificateInfo.uuid)));\n          } else {\n            certificateInfo.setInUse(false);\n            certificateInfo.setUniverseDetails(new ArrayList<>());\n          }\n        });\n  }\n\n  public static void delete(UUID certUUID, UUID customerUUID) {\n    CertificateInfo certificate = CertificateInfo.getOrBadRequest(certUUID, customerUUID);\n    if (!certificate.getInUse()) {\n      if (certificate.delete()) {\n        LOG.info(\"Successfully deleted the certificate: \" + certUUID);\n      } else {\n        throw new PlatformServiceException(\n            INTERNAL_SERVER_ERROR, \"Unable to delete the Certificate\");\n      }\n    } else {\n      throw new PlatformServiceException(BAD_REQUEST, \"The certificate is in use.\");\n    }\n  }\n\n  private void checkEditable(UUID certUUID, UUID customerUUID) {\n    CertificateInfo certInfo = getOrBadRequest(certUUID, customerUUID);\n    if (certInfo.certType == CertificateInfo.Type.SelfSigned) {\n      throw new PlatformServiceException(BAD_REQUEST, \"Cannot edit self-signed cert.\");\n    }\n    if (certInfo.customCertInfo != null) {\n      throw new PlatformServiceException(\n          BAD_REQUEST, \"Cannot edit pre-customized cert. Create a new one.\");\n    }\n  }\n}\n"
    },
    {
      "file": "managed/src/test/java/com/yugabyte/yw/controllers/CertificateControllerTest.java",
      "description": "The final part of the change would be to add a unit test, if appropriate. Play framework provides a method to issue \"fake\" API calls to a \"dummy\" application running against an in-memory H2 database that is very useful to write such unit tests. \r\n\r\nHere, you can see a JUnit-based unit tests that attempt different kinds of certificate uploads and verify the expectation for both successful and invalid API calls. In this case, our API call directly interacts with the DB but we could have situations where the execution of the API calls involves running external commands or making external RPC calls. These can be intercepted and 'mocked' in unit tests using the [mockito framework](https://www.baeldung.com/mockito-annotations).  ",
      "line": 77,
      "contents": "// Copyright (c) YugaByte, Inc.\n\npackage com.yugabyte.yw.controllers;\n\nimport static com.yugabyte.yw.common.AssertHelper.assertAuditEntry;\nimport static com.yugabyte.yw.common.AssertHelper.assertYWSE;\nimport static com.yugabyte.yw.common.TestHelper.createTempFile;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertNotEquals;\nimport static org.junit.Assert.assertNotNull;\nimport static org.junit.Assert.assertNull;\nimport static org.junit.Assert.assertTrue;\nimport static play.mvc.Http.Status.BAD_REQUEST;\nimport static play.mvc.Http.Status.OK;\nimport static play.test.Helpers.contentAsString;\n\nimport com.fasterxml.jackson.databind.JsonNode;\nimport com.fasterxml.jackson.databind.node.ObjectNode;\nimport com.yugabyte.yw.common.CertificateHelper;\nimport com.yugabyte.yw.common.FakeApiHelper;\nimport com.yugabyte.yw.common.FakeDBApplication;\nimport com.yugabyte.yw.common.ModelFactory;\nimport com.yugabyte.yw.common.TestHelper;\nimport com.yugabyte.yw.forms.CertificateParams;\nimport com.yugabyte.yw.models.CertificateInfo;\nimport com.yugabyte.yw.models.Customer;\nimport com.yugabyte.yw.models.Users;\nimport java.io.File;\nimport java.io.IOException;\nimport java.security.NoSuchAlgorithmException;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Date;\nimport java.util.LinkedHashMap;\nimport java.util.List;\nimport java.util.UUID;\nimport org.apache.commons.io.FileUtils;\nimport org.junit.After;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.mockito.Mock;\nimport org.mockito.runners.MockitoJUnitRunner;\nimport play.libs.Json;\nimport play.mvc.Result;\n\n@RunWith(MockitoJUnitRunner.class)\npublic class CertificateControllerTest extends FakeDBApplication {\n  @Mock play.Configuration mockAppConfig;\n\n  private Customer customer;\n  private Users user;\n  private List<String> test_certs = Arrays.asList(\"test_cert1\", \"test_cert2\", \"test_cert3\");\n  private List<UUID> test_certs_uuids = new ArrayList<>();\n\n  @Before\n  public void setUp() {\n    customer = ModelFactory.testCustomer();\n    user = ModelFactory.testUser(customer);\n    for (String cert : test_certs) {\n      test_certs_uuids.add(CertificateHelper.createRootCA(cert, customer.uuid, \"/tmp/certs\"));\n    }\n  }\n\n  @After\n  public void tearDown() throws IOException {\n    FileUtils.deleteDirectory(new File(\"/tmp/certs\"));\n  }\n\n  private Result listCertificates(UUID customerUUID) {\n    String uri = \"/api/customers/\" + customerUUID + \"/certificates\";\n    return FakeApiHelper.doRequestWithAuthToken(\"GET\", uri, user.createAuthToken());\n  }\n\n  private Result uploadCertificate(UUID customerUUID, ObjectNode bodyJson) {\n    String uri = \"/api/customers/\" + customerUUID + \"/certificates\";\n    return FakeApiHelper.doRequestWithAuthTokenAndBody(\n        \"POST\", uri, user.createAuthToken(), bodyJson);\n  }\n\n  private Result updateCertificate(UUID customerUUID, UUID rootUUID, ObjectNode bodyJson) {\n    String uri =\n        \"/api/customers/\" + customerUUID + \"/certificates/\" + rootUUID + \"/update_empty_cert\";\n    return FakeApiHelper.doRequestWithAuthTokenAndBody(\n        \"POST\", uri, user.createAuthToken(), bodyJson);\n  }\n\n  private Result getCertificate(UUID customerUUID, String label) {\n    String uri = \"/api/customers/\" + customerUUID + \"/certificates/\" + label;\n    return FakeApiHelper.doRequestWithAuthToken(\"GET\", uri, user.createAuthToken());\n  }\n\n  private Result deleteCertificate(UUID customerUUID, UUID certUUID) {\n    String uri = \"/api/customers/\" + customerUUID + \"/certificates/\" + certUUID.toString();\n    return FakeApiHelper.doRequestWithAuthToken(\"DELETE\", uri, user.createAuthToken());\n  }\n\n  private Result createClientCertificate(UUID customerUUID, UUID rootUUID, ObjectNode bodyJson) {\n    String uri = \"/api/customers/\" + customerUUID + \"/certificates/\" + rootUUID;\n    return FakeApiHelper.doRequestWithAuthTokenAndBody(\n        \"POST\", uri, user.createAuthToken(), bodyJson);\n  }\n\n  private Result getRootCertificate(UUID customerUUID, UUID rootUUID) {\n    String uri = \"/api/customers/\" + customerUUID + \"/certificates/\" + rootUUID + \"/download\";\n    return FakeApiHelper.doRequestWithAuthToken(\"GET\", uri, user.createAuthToken());\n  }\n\n  @Test\n  public void testListCertificates() {\n    ModelFactory.createUniverse(customer.getCustomerId(), test_certs_uuids.get(0));\n    Result result = listCertificates(customer.uuid);\n    JsonNode json = Json.parse(contentAsString(result));\n    assertEquals(OK, result.status());\n    List<LinkedHashMap> certs = Json.fromJson(json, List.class);\n    List<UUID> result_uuids = new ArrayList<>();\n    List<String> result_labels = new ArrayList<>();\n    for (LinkedHashMap e : certs) {\n      if (e.get(\"uuid\").toString().equals(test_certs_uuids.get(0).toString())) {\n        assertEquals(e.get(\"inUse\"), true);\n        assertNotEquals(e.get(\"universeDetails\"), new ArrayList<>());\n      } else {\n        assertEquals(e.get(\"inUse\"), false);\n        assertEquals(e.get(\"universeDetails\"), new ArrayList<>());\n      }\n      result_uuids.add(UUID.fromString(e.get(\"uuid\").toString()));\n      result_labels.add(e.get(\"label\").toString());\n      assertEquals(e.get(\"certType\"), \"SelfSigned\");\n    }\n    assertEquals(test_certs, result_labels);\n    assertEquals(test_certs_uuids, result_uuids);\n    assertAuditEntry(0, customer.uuid);\n  }\n\n  @Test\n  public void testDeleteCertificate() {\n    UUID cert_uuid = test_certs_uuids.get(0);\n    Result result = deleteCertificate(customer.uuid, cert_uuid);\n    JsonNode json = Json.parse(contentAsString(result));\n    assertEquals(OK, result.status());\n  }\n\n  @Test\n  public void testDeleteInvalidCertificate() {\n    UUID uuid = UUID.randomUUID();\n    Result result = assertYWSE(() -> deleteCertificate(customer.uuid, uuid));\n    JsonNode json = Json.parse(contentAsString(result));\n    assertEquals(BAD_REQUEST, result.status());\n  }\n\n  @Test\n  public void testGetCertificate() {\n    UUID cert_uuid = test_certs_uuids.get(0);\n    Result result = getCertificate(customer.uuid, test_certs.get(0));\n    JsonNode json = Json.parse(contentAsString(result));\n    assertEquals(OK, result.status());\n    assertEquals(cert_uuid, UUID.fromString(json.asText()));\n    assertAuditEntry(0, customer.uuid);\n  }\n\n  @Test\n  public void testUploadCertificate() {\n    String cert_content =\n        \"-----BEGIN CERTIFICATE-----\\n\"\n            + \"MIIDDjCCAfagAwIBAgIGAXVXb5y/MA0GCSqGSIb3DQEBCwUAMDQxHDAaBgNVBAMM\\n\"\n            + \"E3liLWFkbWluLXRlc3QtYXJuYXYxFDASBgNVBAoMC2V4YW1wbGUuY29tMB4XDTIw\\n\"\n            + \"MTAyMzIxNDg1M1oXDTIxMTAyMzIxNDg1M1owNDEcMBoGA1UEAwwTeWItYWRtaW4t\\n\"\n            + \"dGVzdC1hcm5hdjEUMBIGA1UECgwLZXhhbXBsZS5jb20wggEiMA0GCSqGSIb3DQEB\\n\"\n            + \"AQUAA4IBDwAwggEKAoIBAQCVWSZiQhr9e+L2MkSXP38dwXwF7RlZGhrYKrL7pp6l\\n\"\n            + \"aHkLZ0lsFgxI6h0Yyn5S+Hhi/jGWbBso6kXw7frUwVY5kX2Q6iv+E+rKqbYQgNV3\\n\"\n            + \"0vpCtOmNNolhNN3x4SKAIXyKOB5dXMGesjvba/qD6AstKS8bvRCUZcYDPjIUQGPu\\n\"\n            + \"cYLmywV/EdXgB+7WLhUOOY2eBRWBrnGxk60pcHJZeW44g1vas9cfiw81OWVp5/V5\\n\"\n            + \"apA631bE0MTgg283OCyYz+CV/YtnytUTg/+PUEqzM2cWsWdvpEz7TkKYXinRdN4d\\n\"\n            + \"SwgOQEIvb7A/GYYmVf3yk4moUxEh4NLoV9CBDljEBUjZAgMBAAGjJjAkMBIGA1Ud\\n\"\n            + \"EwEB/wQIMAYBAf8CAQEwDgYDVR0PAQH/BAQDAgLkMA0GCSqGSIb3DQEBCwUAA4IB\\n\"\n            + \"AQAFR0m7r1I3FyoatuLBIG+alaeGHqsgNqseAJTDGlEyajGDz4MT0c76ZIQkTSGM\\n\"\n            + \"vsM49Ad2D04sJR44/WlI2AVijubzHBr6Sj8ZdB909nPvGtB+Z8OnvKxJ0LUKyG1K\\n\"\n            + \"VUbcCnN3qSoVeY5PaPeFMmWF0Qv4S8lRTZqAvCnk34bckwkWoHkuuNGO49CsNb40\\n\"\n            + \"Z2NBy9Ckp0KkfeDpGcv9lHuUrl13iakCY09irvYRbfi0lVGF3+wXZtefV8ZAxfnN\\n\"\n            + \"Vt4faawkJ79oahlXDYs6WCKEd3zVM3mR3STnzwxvtB6WacjhqgP4ozXdt6PUbTfZ\\n\"\n            + \"jZPSP3OuL0IXk96wFHScay8S\\n\"\n            + \"-----END CERTIFICATE-----\\n\";\n    ObjectNode bodyJson = Json.newObject();\n    bodyJson.put(\"label\", \"test\");\n    bodyJson.put(\"certContent\", cert_content);\n    bodyJson.put(\"keyContent\", \"key_test\");\n    Date date = new Date();\n    bodyJson.put(\"certStart\", date.getTime());\n    bodyJson.put(\"certExpiry\", date.getTime());\n    bodyJson.put(\"certType\", \"SelfSigned\");\n    Result result = assertYWSE(() -> uploadCertificate(customer.uuid, bodyJson));\n    JsonNode json = Json.parse(contentAsString(result));\n    assertEquals(BAD_REQUEST, result.status());\n    assertAuditEntry(0, customer.uuid);\n  }\n\n  @Test\n  public void testUploadCertificateNoKeyFail() {\n    ObjectNode bodyJson = Json.newObject();\n    bodyJson.put(\"label\", \"test\");\n    bodyJson.put(\"certContent\", \"cert_test\");\n    Date date = new Date();\n    bodyJson.put(\"certStart\", date.getTime());\n    bodyJson.put(\"certExpiry\", date.getTime());\n    bodyJson.put(\"certType\", \"SelfSigned\");\n    Result result = assertYWSE(() -> uploadCertificate(customer.uuid, bodyJson));\n    assertEquals(BAD_REQUEST, result.status());\n    assertAuditEntry(0, customer.uuid);\n  }\n\n  @Test\n  public void testUploadCustomCertificate() {\n    String cert_content =\n        \"-----BEGIN CERTIFICATE-----\\n\"\n            + \"MIIDDjCCAfagAwIBAgIGAXVXb5y/MA0GCSqGSIb3DQEBCwUAMDQxHDAaBgNVBAMM\\n\"\n            + \"E3liLWFkbWluLXRlc3QtYXJuYXYxFDASBgNVBAoMC2V4YW1wbGUuY29tMB4XDTIw\\n\"\n            + \"MTAyMzIxNDg1M1oXDTIxMTAyMzIxNDg1M1owNDEcMBoGA1UEAwwTeWItYWRtaW4t\\n\"\n            + \"dGVzdC1hcm5hdjEUMBIGA1UECgwLZXhhbXBsZS5jb20wggEiMA0GCSqGSIb3DQEB\\n\"\n            + \"AQUAA4IBDwAwggEKAoIBAQCVWSZiQhr9e+L2MkSXP38dwXwF7RlZGhrYKrL7pp6l\\n\"\n            + \"aHkLZ0lsFgxI6h0Yyn5S+Hhi/jGWbBso6kXw7frUwVY5kX2Q6iv+E+rKqbYQgNV3\\n\"\n            + \"0vpCtOmNNolhNN3x4SKAIXyKOB5dXMGesjvba/qD6AstKS8bvRCUZcYDPjIUQGPu\\n\"\n            + \"cYLmywV/EdXgB+7WLhUOOY2eBRWBrnGxk60pcHJZeW44g1vas9cfiw81OWVp5/V5\\n\"\n            + \"apA631bE0MTgg283OCyYz+CV/YtnytUTg/+PUEqzM2cWsWdvpEz7TkKYXinRdN4d\\n\"\n            + \"SwgOQEIvb7A/GYYmVf3yk4moUxEh4NLoV9CBDljEBUjZAgMBAAGjJjAkMBIGA1Ud\\n\"\n            + \"EwEB/wQIMAYBAf8CAQEwDgYDVR0PAQH/BAQDAgLkMA0GCSqGSIb3DQEBCwUAA4IB\\n\"\n            + \"AQAFR0m7r1I3FyoatuLBIG+alaeGHqsgNqseAJTDGlEyajGDz4MT0c76ZIQkTSGM\\n\"\n            + \"vsM49Ad2D04sJR44/WlI2AVijubzHBr6Sj8ZdB909nPvGtB+Z8OnvKxJ0LUKyG1K\\n\"\n            + \"VUbcCnN3qSoVeY5PaPeFMmWF0Qv4S8lRTZqAvCnk34bckwkWoHkuuNGO49CsNb40\\n\"\n            + \"Z2NBy9Ckp0KkfeDpGcv9lHuUrl13iakCY09irvYRbfi0lVGF3+wXZtefV8ZAxfnN\\n\"\n            + \"Vt4faawkJ79oahlXDYs6WCKEd3zVM3mR3STnzwxvtB6WacjhqgP4ozXdt6PUbTfZ\\n\"\n            + \"jZPSP3OuL0IXk96wFHScay8S\\n\"\n            + \"-----END CERTIFICATE-----\\n\";\n    ObjectNode bodyJson = Json.newObject();\n    bodyJson.put(\"label\", \"test\");\n    bodyJson.put(\"certContent\", cert_content);\n    Date date = new Date();\n    bodyJson.put(\"certStart\", date.getTime());\n    bodyJson.put(\"certExpiry\", date.getTime());\n    bodyJson.put(\"certType\", \"CustomCertHostPath\");\n    ObjectNode certJson = Json.newObject();\n    certJson.put(\"rootCertPath\", \"/tmp/rootCertPath\");\n    certJson.put(\"nodeCertPath\", \"/tmp/nodeCertPath\");\n    certJson.put(\"nodeKeyPath\", \"/tmp/nodeKeyPath\");\n    bodyJson.put(\"customCertInfo\", certJson);\n\n    Result result = uploadCertificate(customer.uuid, bodyJson);\n    JsonNode json = Json.parse(contentAsString(result));\n    assertEquals(OK, result.status());\n    UUID certUUID = UUID.fromString(json.asText());\n    CertificateInfo ci = CertificateInfo.get(certUUID);\n    assertEquals(ci.label, \"test\");\n    assertTrue(ci.certificate.contains(\"/tmp\"));\n    assertEquals(ci.certType, CertificateInfo.Type.CustomCertHostPath);\n    assertAuditEntry(1, customer.uuid);\n  }\n\n  @Test\n  public void testUploadCustomServerCertificate() {\n    String cert_content =\n        \"-----BEGIN CERTIFICATE-----\\n\"\n            + \"MIIDEDCCAfigAwIBAgIGAXoJELweMA0GCSqGSIb3DQEBCwUAMDUxHTAbBgNVBAMM\\n\"\n            + \"FHliLWFkbWluLXRlc3QtYXNpbmdoMRQwEgYDVQQKDAtleGFtcGxlLmNvbTAeFw0y\\n\"\n            + \"MTA2MTQwNTQ4NDlaFw0yMjA2MTQwNTQ4NDlaMDUxHTAbBgNVBAMMFHliLWFkbWlu\\n\"\n            + \"LXRlc3QtYXNpbmdoMRQwEgYDVQQKDAtleGFtcGxlLmNvbTCCASIwDQYJKoZIhvcN\\n\"\n            + \"AQEBBQADggEPADCCAQoCggEBAIFAb8DhUfou632m/c186Zs+X8okj8USS4nc3kJr\\n\"\n            + \"0V/sfY92Z0qoEBIPUaBb/MzIjFPWcT/UlTq2hkaCLNVytynFGiIAUtrGvwvW1n5p\\n\"\n            + \"mTHO6V53VunbSwAdRC1WoZqnMqpr4GeWHbdp8eyNoNOecqQ+z94gBVdXDtq3OsHa\\n\"\n            + \"7GuNz7Q/E7VtR0ETKYbYFQG6Os1+vSQSD8fuudWwCyRkR2CgXkcIZgE0xEnb3EBn\\n\"\n            + \"KUc6GD7Ye2CpHSVEpcBZPnT5oR/aODqFw+TAhmliezNrrrIO1gACeKVZmhglQusU\\n\"\n            + \"JCxyKOOJjB9JadQZRoJnf3p2a/UmkS7t+vzyKQX8cUgbAfUCAwEAAaMmMCQwEgYD\\n\"\n            + \"VR0TAQH/BAgwBgEB/wIBATAOBgNVHQ8BAf8EBAMCAuQwDQYJKoZIhvcNAQELBQAD\\n\"\n            + \"ggEBACQ0BxvWvtUh2f4gY4H2zy6jFh65X2dc1D4VXuEf7HGttVsApLX8Ny/7eMRr\\n\"\n            + \"5nEZPNdPEshxSrqtH0gPKCoCr3SRcUhS1VUIG4Yr9Hslui1D+Wk33EqPTVUCXWUb\\n\"\n            + \"Og14JKjAxgXSgxv4gIGO2sc4BglWX0CczxYK/CV0tcgrW7Pk5Gx4MPZF8JcttmUi\\n\"\n            + \"3NREOcmpslu2aEmV8FyTwwJdaZiGhEhBPObNrjsPs+JFLy2TUkHKcOKZcpTK3tdf\\n\"\n            + \"TnkdwZtNz6/4R7YJOATYZ9WoPUdUlemTgHaGlF8mNmiQynOZlgaBpqk4kJS54pmv\\n\"\n            + \"tHIdwRyTVMUFDOk7ZLKS5VB4/MM=\\n\"\n            + \"-----END CERTIFICATE-----\";\n    String server_cert_content =\n        \"-----BEGIN CERTIFICATE-----\\n\"\n            + \"MIIDADCCAeigAwIBAgIUBKN3X3k2+Z3mvx9vpCBWKGZ02DAwDQYJKoZIhvcNAQEL\\n\"\n            + \"BQAwNTEdMBsGA1UEAwwUeWItYWRtaW4tdGVzdC1hc2luZ2gxFDASBgNVBAoMC2V4\\n\"\n            + \"YW1wbGUuY29tMB4XDTIxMDYxNDA1NTIxNloXDTIyMDYxNDA1NTIxNlowLTEVMBMG\\n\"\n            + \"A1UEAwwMMTAuMTUwLjAuMTA3MRQwEgYDVQQKDAtleGFtcGxlLmNvbTCCASIwDQYJ\\n\"\n            + \"KoZIhvcNAQEBBQADggEPADCCAQoCggEBAMXq0mlwLRlOfHsngXobIC7E6zSdPUx3\\n\"\n            + \"9TMhhesH38e3kmAHkTjlew95yP8lM9+3D8uCZgnJiiMxtqhKLQZyNpUJ/uzn9E7M\\n\"\n            + \"VGUiiFIkbTquuY5SOawh7o3AymjU3Y+siMzMQYkxq8BNh/vd9ydfPuBjohQ4lve4\\n\"\n            + \"ZknNTp9DceefXD1Er5oYb2CiRB+FLt8xoI2fuNLwXbLWFn3BFcPwDONNbKNXz/jd\\n\"\n            + \"4VdErrQvd7t9OQYQXWqqJjt4L1JpMFC7DtZmLi3GkyQm/fPEbKVt6oL2IQcIfzku\\n\"\n            + \"M63Ik1ZfQ3PEeXrx4xHqtk6FlJL+YNJHmoLHjPWjveyY8atXKfY5if0CAwEAAaMQ\\n\"\n            + \"MA4wDAYDVR0TAQH/BAIwADANBgkqhkiG9w0BAQsFAAOCAQEAf1NSKX0QSnemh/1a\\n\"\n            + \"D1tXZJqsxsNHnJ1ub6H815yJkdM4X17B41qEVgsz2RUGyWeTOb4sfY+i/If2KFeS\\n\"\n            + \"3yoNhQ0/3hwy0ubUOkQeu/u4gCqcfynOthFU+AbTD4FsvStyRJfdKbsAEE2xRtan\\n\"\n            + \"6SwfS5NSyEersr0NH4jA3kD+D7m0nEml2rMpuyMisYXLDjoGpTMO3UACTctb1AMi\\n\"\n            + \"XgyOf5cNLUpgeKa6gHXG/zV+gaqzClbRzwiKwUc/euuIQIvoPqKSAmwgxEb4+Z1O\\n\"\n            + \"hTjo/tX+W4326YDWgO3g0ooLG1NIokTzfQVM7uuf/rw8C2G5zGORGXeGWambgJbD\\n\"\n            + \"pBJxoQ==\\n\"\n            + \"-----END CERTIFICATE-----\";\n    String server_key_content =\n        \"-----BEGIN RSA PRIVATE KEY-----\\n\"\n            + \"MIIEogIBAAKCAQEAxerSaXAtGU58eyeBehsgLsTrNJ09THf1MyGF6wffx7eSYAeR\\n\"\n            + \"OOV7D3nI/yUz37cPy4JmCcmKIzG2qEotBnI2lQn+7Of0TsxUZSKIUiRtOq65jlI5\\n\"\n            + \"rCHujcDKaNTdj6yIzMxBiTGrwE2H+933J18+4GOiFDiW97hmSc1On0Nx559cPUSv\\n\"\n            + \"mhhvYKJEH4Uu3zGgjZ+40vBdstYWfcEVw/AM401so1fP+N3hV0SutC93u305BhBd\\n\"\n            + \"aqomO3gvUmkwULsO1mYuLcaTJCb988RspW3qgvYhBwh/OS4zrciTVl9Dc8R5evHj\\n\"\n            + \"Eeq2ToWUkv5g0keagseM9aO97Jjxq1cp9jmJ/QIDAQABAoIBAB2ETeknr7IsgGgl\\n\"\n            + \"livNy9jtyV5JbRDwewMrJrvMqtUwTYZA2qmvn9DJCu7yb3AX7yUcx3cCNbXV/jXP\\n\"\n            + \"CjQB6J4FpZ1TYp413whORCJsCFZOJKJTJQLE9LzzWbyUso5w3t4cQFHjtIeziGpJ\\n\"\n            + \"ykh27futIEj/v5QmTisHkYgzGNPALwfnh3V/x4EO5A6Hn/OU01N7g6JRRJ+RCPuU\\n\"\n            + \"YHmm6g5zmWHZWe2mMBHIeRd6hrbJeHZYNGLLCo7kNbMr7+zK1wBytM+xR6yiVOMG\\n\"\n            + \"1A3gPpQSP53smEdV9EW1RBgdibGzHeJHrxggYBIkpujuuwkC7T0s+3WZVBhxPWdW\\n\"\n            + \"A/3MRYECgYEA+zRVbCww569lZQ+hmzw5D3jvtTCCU9nmF223ZUoWTQzQIR51S0BA\\n\"\n            + \"h19ukIMwMp1P0QlL6CjvY94hzgAJC1UWJNcgKlV0ie/huhYlTfldTj/6YY6ik2nP\\n\"\n            + \"1jzLpsZHS4fshj78IkkNG9nouhfIqjCHyNHV1KD5ntxhowrgEDfU6fECgYEAybIR\\n\"\n            + \"Rvbof8Kr1/P6CWqV53QpTlabU2zGEyl19yQdOjkjJY4jN+Zyj6mPiLBnnRahFubn\\n\"\n            + \"5xz4ltXaRGwNnHOVTx3fklGWNDauGQhSZslJii5SjmHQrJWirxB042lxp5WZNIU0\\n\"\n            + \"NgZTaNWb1KALi5Q8OWiYppwYcyU9SG4xIiFJdM0CgYAp3zNN8J/GPqo8Cjr50TQB\\n\"\n            + \"rDrojMlsiKmdxiAHti25ciVPH/CVNoSLDBE17WgfR7GCOnZ4oDom/2PLHp5jUS97\\n\"\n            + \"vJAT/mKKi32oswBM2v/+hxOJJ2laAQ0vvLqFdg90O5flWKJWZK7WsZ/lRQmhtK0t\\n\"\n            + \"gCyQYLS7EikEME/g5C2NQQKBgFl4tFFWliyWnsRdZj1nGrhhvzERGjYXuoYljj7j\\n\"\n            + \"tlNtpTmzo8vYXll8Tj/EgTIeJ7eRFq5fG6dNllVj2WXdoA5IojS2HHttBi30kxkl\\n\"\n            + \"kYnKorSmj3r/pfsiwbdfvxsoMZ4quM5+X+HRYB8iH/z69PxCefTuqanqixTmTMVn\\n\"\n            + \"Hr7BAoGAQbOxZCwv+PWU+T9W/Q846WizI+j52PCu5aXdba6dpa7RcR54G6VY8cxq\\n\"\n            + \"XAt1Lnt4lzRaEc4FHl5X4PfOKMmjIxhm2dr98w+ZIuOzbBi/wuYL4pSpT5Yqh7pB\\n\"\n            + \"jz+NbPTBYb/tdbJI+u/08aJTTfjWb79RP4t25A8RiQ7ZbsEUaN0=\\n\"\n            + \"-----END RSA PRIVATE KEY-----\";\n    ObjectNode bodyJson = Json.newObject();\n    bodyJson.put(\"label\", \"test\");\n    bodyJson.put(\"certContent\", cert_content);\n    Date date = new Date();\n    bodyJson.put(\"certStart\", date.getTime());\n    bodyJson.put(\"certExpiry\", date.getTime());\n    bodyJson.put(\"certType\", \"CustomServerCert\");\n    ObjectNode certJson = Json.newObject();\n    certJson.put(\"serverCertContent\", server_cert_content);\n    certJson.put(\"serverKeyContent\", server_key_content);\n    bodyJson.put(\"customServerCertData\", certJson);\n\n    Result result = uploadCertificate(customer.uuid, bodyJson);\n    JsonNode json = Json.parse(contentAsString(result));\n    assertEquals(OK, result.status());\n    UUID certUUID = UUID.fromString(json.asText());\n    CertificateInfo ci = CertificateInfo.get(certUUID);\n    CertificateInfo.CustomServerCertInfo customServerCertInfo = ci.getCustomServerCertInfo();\n    assertEquals(ci.label, \"test\");\n    assertTrue(ci.certificate.contains(\"/tmp\"));\n    assertTrue(customServerCertInfo.serverCert.contains(\"/tmp\"));\n    assertTrue(customServerCertInfo.serverKey.contains(\"/tmp\"));\n    assertEquals(ci.certType, CertificateInfo.Type.CustomServerCert);\n    assertAuditEntry(1, customer.uuid);\n  }\n\n  @Test\n  public void testUpdateCustomCertificate() throws IOException, NoSuchAlgorithmException {\n    UUID certUUID = UUID.randomUUID();\n    Date date = new Date();\n    new File(TestHelper.TMP_PATH).mkdirs();\n    createTempFile(\"ca.crt\", \"test-cert\");\n    CertificateParams.CustomCertInfo emptyCustomCertInfo = null;\n    CertificateInfo.create(\n        certUUID,\n        customer.uuid,\n        \"test\",\n        date,\n        date,\n        TestHelper.TMP_PATH + \"/ca.crt\",\n        emptyCustomCertInfo);\n    CertificateParams.CustomCertInfo customCertInfo =\n        CertificateInfo.get(certUUID).getCustomCertInfo();\n    assertNull(customCertInfo);\n    ObjectNode bodyJson = Json.newObject();\n    bodyJson.put(\"label\", \"test\");\n    bodyJson.put(\"certContent\", \"cert_test\");\n    bodyJson.put(\"certStart\", date.getTime());\n    bodyJson.put(\"certExpiry\", date.getTime());\n    bodyJson.put(\"certType\", \"CustomCertHostPath\");\n    ObjectNode certJson = Json.newObject();\n    certJson.put(\"rootCertPath\", \"/tmp/rootCertPath\");\n    certJson.put(\"nodeCertPath\", \"/tmp/nodeCertPath\");\n    certJson.put(\"nodeKeyPath\", \"/tmp/nodeKeyPath\");\n    bodyJson.put(\"customCertInfo\", certJson);\n    Result result = updateCertificate(customer.uuid, certUUID, bodyJson);\n    assertEquals(OK, result.status());\n    customCertInfo = CertificateInfo.get(certUUID).getCustomCertInfo();\n    assertNotNull(customCertInfo);\n  }\n\n  @Test\n  public void testUpdateCustomCertificateFailure() throws IOException, NoSuchAlgorithmException {\n    UUID certUUID = UUID.randomUUID();\n    Date date = new Date();\n    CertificateParams.CustomCertInfo customCertInfo = new CertificateParams.CustomCertInfo();\n    customCertInfo.rootCertPath = \"rootCertPath\";\n    customCertInfo.nodeCertPath = \"nodeCertPath\";\n    customCertInfo.nodeKeyPath = \"nodeKeyPath\";\n    new File(TestHelper.TMP_PATH).mkdirs();\n    createTempFile(\"ca.crt\", \"test-cert\");\n    CertificateInfo.create(\n        certUUID,\n        customer.uuid,\n        \"test\",\n        date,\n        date,\n        TestHelper.TMP_PATH + \"/ca.crt\",\n        customCertInfo);\n    customCertInfo = CertificateInfo.get(certUUID).getCustomCertInfo();\n    assertNotNull(customCertInfo);\n    ObjectNode bodyJson = Json.newObject();\n    bodyJson.put(\"label\", \"test\");\n    bodyJson.put(\"certContent\", \"cert_test\");\n    bodyJson.put(\"certStart\", date.getTime());\n    bodyJson.put(\"certExpiry\", date.getTime());\n    bodyJson.put(\"certType\", \"CustomCertHostPath\");\n    ObjectNode certJson = Json.newObject();\n    certJson.put(\"rootCertPath\", \"/tmp/rootCertPath\");\n    certJson.put(\"nodeCertPath\", \"/tmp/nodeCertPath\");\n    certJson.put(\"nodeKeyPath\", \"/tmp/nodeKeyPath\");\n    bodyJson.put(\"customCertInfo\", certJson);\n    Result result = assertYWSE(() -> updateCertificate(customer.uuid, certUUID, bodyJson));\n    assertEquals(BAD_REQUEST, result.status());\n  }\n\n  @Test\n  public void testCreateClientCertificate() {\n    String cert_content =\n        \"-----BEGIN CERTIFICATE-----\\n\"\n            + \"MIIDDjCCAfagAwIBAgIGAXVXb5y/MA0GCSqGSIb3DQEBCwUAMDQxHDAaBgNVBAMM\\n\"\n            + \"E3liLWFkbWluLXRlc3QtYXJuYXYxFDASBgNVBAoMC2V4YW1wbGUuY29tMB4XDTIw\\n\"\n            + \"MTAyMzIxNDg1M1oXDTIxMTAyMzIxNDg1M1owNDEcMBoGA1UEAwwTeWItYWRtaW4t\\n\"\n            + \"dGVzdC1hcm5hdjEUMBIGA1UECgwLZXhhbXBsZS5jb20wggEiMA0GCSqGSIb3DQEB\\n\"\n            + \"AQUAA4IBDwAwggEKAoIBAQCVWSZiQhr9e+L2MkSXP38dwXwF7RlZGhrYKrL7pp6l\\n\"\n            + \"aHkLZ0lsFgxI6h0Yyn5S+Hhi/jGWbBso6kXw7frUwVY5kX2Q6iv+E+rKqbYQgNV3\\n\"\n            + \"0vpCtOmNNolhNN3x4SKAIXyKOB5dXMGesjvba/qD6AstKS8bvRCUZcYDPjIUQGPu\\n\"\n            + \"cYLmywV/EdXgB+7WLhUOOY2eBRWBrnGxk60pcHJZeW44g1vas9cfiw81OWVp5/V5\\n\"\n            + \"apA631bE0MTgg283OCyYz+CV/YtnytUTg/+PUEqzM2cWsWdvpEz7TkKYXinRdN4d\\n\"\n            + \"SwgOQEIvb7A/GYYmVf3yk4moUxEh4NLoV9CBDljEBUjZAgMBAAGjJjAkMBIGA1Ud\\n\"\n            + \"EwEB/wQIMAYBAf8CAQEwDgYDVR0PAQH/BAQDAgLkMA0GCSqGSIb3DQEBCwUAA4IB\\n\"\n            + \"AQAFR0m7r1I3FyoatuLBIG+alaeGHqsgNqseAJTDGlEyajGDz4MT0c76ZIQkTSGM\\n\"\n            + \"vsM49Ad2D04sJR44/WlI2AVijubzHBr6Sj8ZdB909nPvGtB+Z8OnvKxJ0LUKyG1K\\n\"\n            + \"VUbcCnN3qSoVeY5PaPeFMmWF0Qv4S8lRTZqAvCnk34bckwkWoHkuuNGO49CsNb40\\n\"\n            + \"Z2NBy9Ckp0KkfeDpGcv9lHuUrl13iakCY09irvYRbfi0lVGF3+wXZtefV8ZAxfnN\\n\"\n            + \"Vt4faawkJ79oahlXDYs6WCKEd3zVM3mR3STnzwxvtB6WacjhqgP4ozXdt6PUbTfZ\\n\"\n            + \"jZPSP3OuL0IXk96wFHScay8S\\n\"\n            + \"-----END CERTIFICATE-----\\n\";\n    ObjectNode bodyJson = Json.newObject();\n    Date date = new Date();\n    bodyJson.put(\"username\", \"test\");\n    bodyJson.put(\"certStart\", date.getTime());\n    bodyJson.put(\"certExpiry\", date.getTime());\n    bodyJson.put(\"certContent\", cert_content);\n    UUID rootCA = CertificateHelper.createRootCA(\"test-universe\", customer.uuid, \"/tmp\");\n    Result result = createClientCertificate(customer.uuid, rootCA, bodyJson);\n    JsonNode json = Json.parse(contentAsString(result));\n    assertEquals(OK, result.status());\n    String clientCert = json.get(\"yugabytedb.crt\").asText();\n    String clientKey = json.get(\"yugabytedb.key\").asText();\n    assertNotNull(clientCert);\n    assertNotNull(clientKey);\n    assertAuditEntry(1, customer.uuid);\n  }\n\n  @Test\n  public void testGetRootCertificate() {\n    UUID rootCA = CertificateHelper.createRootCA(\"test-universe\", customer.uuid, \"/tmp\");\n    Result result = getRootCertificate(customer.uuid, rootCA);\n    JsonNode json = Json.parse(contentAsString(result));\n    assertEquals(OK, result.status());\n    String rootCert = json.get(\"root.crt\").asText();\n    assertNotNull(rootCert);\n    assertAuditEntry(1, customer.uuid);\n  }\n}\n"
    }
  ]
}